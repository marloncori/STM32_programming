
blinkfour_leds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003060  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f8  080031f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003200  08003200  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000324  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  20000330  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000afdf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eb4  00000000  00000000  0002b01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002ced0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007d8  00000000  00000000  0002d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020bfd  00000000  00000000  0002df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a646  00000000  00000000  0004eb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8b65  00000000  00000000  0005919b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121d00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002318  00000000  00000000  00121d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031d0 	.word	0x080031d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031d0 	.word	0x080031d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 f9a2 	bl	8000818 <HAL_Init>
  MX_GPIO_Init();
 80004d4:	f000 f872 	bl	80005bc <MX_GPIO_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f806 	bl	80004e8 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  Configure_Led_Pins();
 80004dc:	f000 f89e 	bl	800061c <Configure_Led_Pins>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 Blink_Four_Leds();
 80004e0:	f000 f8c4 	bl	800066c <Blink_Four_Leds>
 80004e4:	e7fc      	b.n	80004e0 <main+0x14>
	...

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	; 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	; 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fe62 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	4a27      	ldr	r2, [pc, #156]	; (80005b4 <SystemClock_Config+0xcc>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a21      	ldr	r2, [pc, #132]	; (80005b8 <SystemClock_Config+0xd0>)
 8000532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000558:	2308      	movs	r3, #8
 800055a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800055c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000566:	2307      	movs	r3, #7
 8000568:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fd8c 	bl	800208c <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057a:	f000 f8af 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	2302      	movs	r3, #2
 8000584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2105      	movs	r1, #5
 800059c:	4618      	mov	r0, r3
 800059e:	f001 ffed 	bl	800257c <HAL_RCC_ClockConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a8:	f000 f898 	bl	80006dc <Error_Handler>
  }
}
 80005ac:	bf00      	nop
 80005ae:	3750      	adds	r7, #80	; 0x50
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x5c>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x5c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

 }
 800060a:	bf00      	nop
 800060c:	3724      	adds	r7, #36	; 0x24
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <Configure_Led_Pins>:

/* USER CODE BEGIN 4 */
void Configure_Led_Pins(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef Led_Config;
	Led_Config.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	60bb      	str	r3, [r7, #8]
	Led_Config.Pin = Blue_Led_Pin | Red_Led_Pin | Yellow_Led_Pin | Green_Led_Pin;
 8000626:	2356      	movs	r3, #86	; 0x56
 8000628:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(Leds_GPIO_Port, &Led_Config);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <Configure_Led_Pins+0x20>)
 8000630:	f000 fa4a 	bl	8000ac8 <HAL_GPIO_Init>
}
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40020c00 	.word	0x40020c00

08000640 <Delay_ms>:

void Delay_ms(uint32_t msTime)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
   for(uint32_t i=0; i<msTime; i++){
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e002      	b.n	8000654 <Delay_ms+0x14>
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	d3f8      	bcc.n	800064e <Delay_ms+0xe>
   }
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
	...

0800066c <Blink_Four_Leds>:

void Blink_Four_Leds(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	uint32_t DELAY_TIME = 1000;
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	607b      	str	r3, [r7, #4]

	while(DELAY_TIME >= 400){
 8000678:	e01e      	b.n	80006b8 <Blink_Four_Leds+0x4c>
		HAL_GPIO_TogglePin(Leds_GPIO_Port, Red_Led_Pin);
 800067a:	2104      	movs	r1, #4
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <Blink_Four_Leds+0x6c>)
 800067e:	f000 fbbf 	bl	8000e00 <HAL_GPIO_TogglePin>
		Delay_ms(DELAY_TIME);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ffdc 	bl	8000640 <Delay_ms>
		HAL_GPIO_TogglePin(Leds_GPIO_Port, Blue_Led_Pin);
 8000688:	2102      	movs	r1, #2
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <Blink_Four_Leds+0x6c>)
 800068c:	f000 fbb8 	bl	8000e00 <HAL_GPIO_TogglePin>
		Delay_ms(DELAY_TIME);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff ffd5 	bl	8000640 <Delay_ms>
		HAL_GPIO_TogglePin(Leds_GPIO_Port, Yellow_Led_Pin);
 8000696:	2110      	movs	r1, #16
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <Blink_Four_Leds+0x6c>)
 800069a:	f000 fbb1 	bl	8000e00 <HAL_GPIO_TogglePin>
		Delay_ms(DELAY_TIME);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ffce 	bl	8000640 <Delay_ms>
		HAL_GPIO_TogglePin(Leds_GPIO_Port, Green_Led_Pin);
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <Blink_Four_Leds+0x6c>)
 80006a8:	f000 fbaa 	bl	8000e00 <HAL_GPIO_TogglePin>
		Delay_ms(DELAY_TIME);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ffc7 	bl	8000640 <Delay_ms>
		DELAY_TIME -= 50;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3b32      	subs	r3, #50	; 0x32
 80006b6:	607b      	str	r3, [r7, #4]
	while(DELAY_TIME >= 400){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80006be:	d2dc      	bcs.n	800067a <Blink_Four_Leds+0xe>
	}

	if(DELAY_TIME == 400){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80006c6:	d102      	bne.n	80006ce <Blink_Four_Leds+0x62>
		DELAY_TIME = 1000;
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	607b      	str	r3, [r7, #4]
	}
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40020c00 	.word	0x40020c00

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <HAL_MspInit+0x4c>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fc:	6453      	str	r3, [r2, #68]	; 0x44
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <HAL_MspInit+0x4c>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000726:	2007      	movs	r0, #7
 8000728:	f000 f99a 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000784:	f000 f89a 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <OTG_FS_IRQHandler+0x10>)
 8000792:	f000 fb4f 	bl	8000e34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000002c 	.word	0x2000002c

080007a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007ca:	490e      	ldr	r1, [pc, #56]	; (8000804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007e0:	4c0b      	ldr	r4, [pc, #44]	; (8000810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ee:	f7ff ffd7 	bl	80007a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f002 fcc1 	bl	8003178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff fe69 	bl	80004cc <main>
  bx  lr    
 80007fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000808:	08003208 	.word	0x08003208
  ldr r2, =_sbss
 800080c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000810:	20000330 	.word	0x20000330

08000814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC_IRQHandler>
	...

08000818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_Init+0x40>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <HAL_Init+0x40>)
 8000822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <HAL_Init+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <HAL_Init+0x40>)
 800082e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_Init+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_Init+0x40>)
 800083a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800083e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f90d 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff ff4c 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023c00 	.word	0x40023c00

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f917 	bl	8000aae <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 f8ed 	bl	8000a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_IncTick+0x20>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_IncTick+0x24>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_IncTick+0x24>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000028 	.word	0x20000028

080008e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_GetTick+0x14>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000028 	.word	0x20000028

080008fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000918:	4013      	ands	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <__NVIC_SetPriorityGrouping+0x44>)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <__NVIC_GetPriorityGrouping+0x18>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	f003 0307 	and.w	r3, r3, #7
}
 8000952:	4618      	mov	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000970:	2b00      	cmp	r3, #0
 8000972:	db0a      	blt.n	800098a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	490c      	ldr	r1, [pc, #48]	; (80009ac <__NVIC_SetPriority+0x4c>)
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	0112      	lsls	r2, r2, #4
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	440b      	add	r3, r1
 8000984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000988:	e00a      	b.n	80009a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <__NVIC_SetPriority+0x50>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	3b04      	subs	r3, #4
 8000998:	0112      	lsls	r2, r2, #4
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	440b      	add	r3, r1
 800099e:	761a      	strb	r2, [r3, #24]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000e100 	.word	0xe000e100
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f1c3 0307 	rsb	r3, r3, #7
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	bf28      	it	cs
 80009d2:	2304      	movcs	r3, #4
 80009d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3304      	adds	r3, #4
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d902      	bls.n	80009e4 <NVIC_EncodePriority+0x30>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3b03      	subs	r3, #3
 80009e2:	e000      	b.n	80009e6 <NVIC_EncodePriority+0x32>
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43da      	mvns	r2, r3
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	401a      	ands	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43d9      	mvns	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	4313      	orrs	r3, r2
         );
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3724      	adds	r7, #36	; 0x24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f7ff ff8e 	bl	8000960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff47 	bl	80008fc <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff5c 	bl	8000944 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff8e 	bl	80009b4 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5d 	bl	8000960 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffb0 	bl	8000a1c <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
 8000ae2:	e16b      	b.n	8000dbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	f040 815a 	bne.w	8000db6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d005      	beq.n	8000b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d130      	bne.n	8000b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2203      	movs	r2, #3
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b50:	2201      	movs	r2, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	091b      	lsrs	r3, r3, #4
 8000b66:	f003 0201 	and.w	r2, r3, #1
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d017      	beq.n	8000bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	689a      	ldr	r2, [r3, #8]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d123      	bne.n	8000c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	08da      	lsrs	r2, r3, #3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	220f      	movs	r2, #15
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	691a      	ldr	r2, [r3, #16]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	08da      	lsrs	r2, r3, #3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3208      	adds	r2, #8
 8000c06:	69b9      	ldr	r1, [r7, #24]
 8000c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0203 	and.w	r2, r3, #3
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 80b4 	beq.w	8000db6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b60      	ldr	r3, [pc, #384]	; (8000dd4 <HAL_GPIO_Init+0x30c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a5f      	ldr	r2, [pc, #380]	; (8000dd4 <HAL_GPIO_Init+0x30c>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b5d      	ldr	r3, [pc, #372]	; (8000dd4 <HAL_GPIO_Init+0x30c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c6a:	4a5b      	ldr	r2, [pc, #364]	; (8000dd8 <HAL_GPIO_Init+0x310>)
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	3302      	adds	r3, #2
 8000c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	220f      	movs	r2, #15
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a52      	ldr	r2, [pc, #328]	; (8000ddc <HAL_GPIO_Init+0x314>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d02b      	beq.n	8000cee <HAL_GPIO_Init+0x226>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a51      	ldr	r2, [pc, #324]	; (8000de0 <HAL_GPIO_Init+0x318>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d025      	beq.n	8000cea <HAL_GPIO_Init+0x222>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a50      	ldr	r2, [pc, #320]	; (8000de4 <HAL_GPIO_Init+0x31c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d01f      	beq.n	8000ce6 <HAL_GPIO_Init+0x21e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a4f      	ldr	r2, [pc, #316]	; (8000de8 <HAL_GPIO_Init+0x320>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d019      	beq.n	8000ce2 <HAL_GPIO_Init+0x21a>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a4e      	ldr	r2, [pc, #312]	; (8000dec <HAL_GPIO_Init+0x324>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d013      	beq.n	8000cde <HAL_GPIO_Init+0x216>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a4d      	ldr	r2, [pc, #308]	; (8000df0 <HAL_GPIO_Init+0x328>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d00d      	beq.n	8000cda <HAL_GPIO_Init+0x212>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a4c      	ldr	r2, [pc, #304]	; (8000df4 <HAL_GPIO_Init+0x32c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d007      	beq.n	8000cd6 <HAL_GPIO_Init+0x20e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4b      	ldr	r2, [pc, #300]	; (8000df8 <HAL_GPIO_Init+0x330>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_GPIO_Init+0x20a>
 8000cce:	2307      	movs	r3, #7
 8000cd0:	e00e      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	e00c      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cd6:	2306      	movs	r3, #6
 8000cd8:	e00a      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cda:	2305      	movs	r3, #5
 8000cdc:	e008      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e004      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e002      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_Init+0x228>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	69fa      	ldr	r2, [r7, #28]
 8000cf2:	f002 0203 	and.w	r2, r2, #3
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d00:	4935      	ldr	r1, [pc, #212]	; (8000dd8 <HAL_GPIO_Init+0x310>)
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	43db      	mvns	r3, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d32:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d38:	4b30      	ldr	r3, [pc, #192]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d5c:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d86:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000db0:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <HAL_GPIO_Init+0x334>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3301      	adds	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	f67f ae90 	bls.w	8000ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40013800 	.word	0x40013800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40021400 	.word	0x40021400
 8000df4:	40021800 	.word	0x40021800
 8000df8:	40021c00 	.word	0x40021c00
 8000dfc:	40013c00 	.word	0x40013c00

08000e00 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4013      	ands	r3, r2
 8000e18:	041a      	lsls	r2, r3, #16
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43d9      	mvns	r1, r3
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	400b      	ands	r3, r1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fe73 	bl	8002b36 <USB_GetMode>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	f040 80f6 	bne.w	8001044 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fe57 	bl	8002b10 <USB_ReadInterrupts>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80ec 	beq.w	8001042 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fe4e 	bl	8002b10 <USB_ReadInterrupts>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000e7e:	d104      	bne.n	8000e8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fe3e 	bl	8002b10 <USB_ReadInterrupts>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e9e:	d104      	bne.n	8000eaa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fe2e 	bl	8002b10 <USB_ReadInterrupts>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ebe:	d104      	bne.n	8000eca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fe1e 	bl	8002b10 <USB_ReadInterrupts>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d103      	bne.n	8000ee6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 fe10 	bl	8002b10 <USB_ReadInterrupts>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000efa:	d11c      	bne.n	8000f36 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10f      	bne.n	8000f36 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000f16:	2110      	movs	r1, #16
 8000f18:	6938      	ldr	r0, [r7, #16]
 8000f1a:	f001 fd3d 	bl	8002998 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000f1e:	6938      	ldr	r0, [r7, #16]
 8000f20:	f001 fd6e 	bl	8002a00 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fe11 	bl	8002b52 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f002 f8a2 	bl	800307a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fde8 	bl	8002b10 <USB_ReadInterrupts>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4a:	d102      	bne.n	8000f52 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f001 f829 	bl	8001fa4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fdda 	bl	8002b10 <USB_ReadInterrupts>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	2b08      	cmp	r3, #8
 8000f64:	d106      	bne.n	8000f74 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f002 f86b 	bl	8003042 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2208      	movs	r2, #8
 8000f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fdc9 	bl	8002b10 <USB_ReadInterrupts>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f003 0310 	and.w	r3, r3, #16
 8000f84:	2b10      	cmp	r3, #16
 8000f86:	d101      	bne.n	8000f8c <HAL_HCD_IRQHandler+0x158>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_HCD_IRQHandler+0x15a>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d012      	beq.n	8000fb8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	699a      	ldr	r2, [r3, #24]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0210 	bic.w	r2, r2, #16
 8000fa0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 ff2c 	bl	8001e00 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	699a      	ldr	r2, [r3, #24]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0210 	orr.w	r2, r2, #16
 8000fb6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fda7 	bl	8002b10 <USB_ReadInterrupts>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fcc:	d13a      	bne.n	8001044 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fdf7 	bl	8002bc6 <USB_HC_ReadInterrupt>
 8000fd8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e025      	b.n	800102c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d018      	beq.n	8001026 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	015a      	lsls	r2, r3, #5
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800100a:	d106      	bne.n	800101a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	4619      	mov	r1, r3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f836 	bl	8001084 <HCD_HC_IN_IRQHandler>
 8001018:	e005      	b.n	8001026 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 fb84 	bl	800172e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3d4      	bcc.n	8000fe0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	e000      	b.n	8001044 <HAL_HCD_IRQHandler+0x210>
      return;
 8001042:	bf00      	nop
    }
  }
}
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_HCD_Stop+0x16>
 800105c:	2302      	movs	r3, #2
 800105e:	e00d      	b.n	800107c <HAL_HCD_Stop+0x32>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f001 feb7 	bl	8002de0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	015a      	lsls	r2, r3, #5
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4413      	add	r3, r2
 80010a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d11a      	bne.n	80010ea <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	015a      	lsls	r2, r3, #5
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4413      	add	r3, r2
 80010bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010c0:	461a      	mov	r2, r3
 80010c2:	2304      	movs	r3, #4
 80010c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	212c      	movs	r1, #44	; 0x2c
 80010cc:	fb01 f303 	mul.w	r3, r1, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	3361      	adds	r3, #97	; 0x61
 80010d4:	2206      	movs	r2, #6
 80010d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fd80 	bl	8002be8 <USB_HC_Halt>
 80010e8:	e0af      	b.n	800124a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	015a      	lsls	r2, r3, #5
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4413      	add	r3, r2
 80010f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001100:	d11b      	bne.n	800113a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	015a      	lsls	r2, r3, #5
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4413      	add	r3, r2
 800110a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800110e:	461a      	mov	r2, r3
 8001110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001114:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	212c      	movs	r1, #44	; 0x2c
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	3361      	adds	r3, #97	; 0x61
 8001124:	2207      	movs	r2, #7
 8001126:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fd58 	bl	8002be8 <USB_HC_Halt>
 8001138:	e087      	b.n	800124a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	015a      	lsls	r2, r3, #5
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4413      	add	r3, r2
 8001142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0320 	and.w	r3, r3, #32
 800114c:	2b20      	cmp	r3, #32
 800114e:	d109      	bne.n	8001164 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	015a      	lsls	r2, r3, #5
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4413      	add	r3, r2
 8001158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800115c:	461a      	mov	r2, r3
 800115e:	2320      	movs	r3, #32
 8001160:	6093      	str	r3, [r2, #8]
 8001162:	e072      	b.n	800124a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	015a      	lsls	r2, r3, #5
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b08      	cmp	r3, #8
 8001178:	d11a      	bne.n	80011b0 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	015a      	lsls	r2, r3, #5
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4413      	add	r3, r2
 8001182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001186:	461a      	mov	r2, r3
 8001188:	2308      	movs	r3, #8
 800118a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	212c      	movs	r1, #44	; 0x2c
 8001192:	fb01 f303 	mul.w	r3, r1, r3
 8001196:	4413      	add	r3, r2
 8001198:	3361      	adds	r3, #97	; 0x61
 800119a:	2205      	movs	r2, #5
 800119c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fd1d 	bl	8002be8 <USB_HC_Halt>
 80011ae:	e04c      	b.n	800124a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	015a      	lsls	r2, r3, #5
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4413      	add	r3, r2
 80011b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c6:	d11b      	bne.n	8001200 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	015a      	lsls	r2, r3, #5
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4413      	add	r3, r2
 80011d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011d4:	461a      	mov	r2, r3
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	212c      	movs	r1, #44	; 0x2c
 80011e2:	fb01 f303 	mul.w	r3, r1, r3
 80011e6:	4413      	add	r3, r2
 80011e8:	3361      	adds	r3, #97	; 0x61
 80011ea:	2208      	movs	r2, #8
 80011ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fcf5 	bl	8002be8 <USB_HC_Halt>
 80011fe:	e024      	b.n	800124a <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	015a      	lsls	r2, r3, #5
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4413      	add	r3, r2
 8001208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	2b80      	cmp	r3, #128	; 0x80
 8001214:	d119      	bne.n	800124a <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	015a      	lsls	r2, r3, #5
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4413      	add	r3, r2
 800121e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001222:	461a      	mov	r2, r3
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	212c      	movs	r1, #44	; 0x2c
 800122e:	fb01 f303 	mul.w	r3, r1, r3
 8001232:	4413      	add	r3, r2
 8001234:	3361      	adds	r3, #97	; 0x61
 8001236:	2206      	movs	r2, #6
 8001238:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fccf 	bl	8002be8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	015a      	lsls	r2, r3, #5
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4413      	add	r3, r2
 8001252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001260:	d112      	bne.n	8001288 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fcbb 	bl	8002be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	015a      	lsls	r2, r3, #5
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4413      	add	r3, r2
 800127a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800127e:	461a      	mov	r2, r3
 8001280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001284:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001286:	e24e      	b.n	8001726 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	015a      	lsls	r2, r3, #5
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4413      	add	r3, r2
 8001290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	f040 80df 	bne.w	800145e <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d019      	beq.n	80012dc <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	212c      	movs	r1, #44	; 0x2c
 80012ae:	fb01 f303 	mul.w	r3, r1, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	3348      	adds	r3, #72	; 0x48
 80012b6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	0159      	lsls	r1, r3, #5
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	440b      	add	r3, r1
 80012c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80012ca:	1ad2      	subs	r2, r2, r3
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	202c      	movs	r0, #44	; 0x2c
 80012d2:	fb00 f303 	mul.w	r3, r0, r3
 80012d6:	440b      	add	r3, r1
 80012d8:	3350      	adds	r3, #80	; 0x50
 80012da:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	212c      	movs	r1, #44	; 0x2c
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	3361      	adds	r3, #97	; 0x61
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	212c      	movs	r1, #44	; 0x2c
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	335c      	adds	r3, #92	; 0x5c
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	015a      	lsls	r2, r3, #5
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4413      	add	r3, r2
 8001308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800130c:	461a      	mov	r2, r3
 800130e:	2301      	movs	r3, #1
 8001310:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	212c      	movs	r1, #44	; 0x2c
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	4413      	add	r3, r2
 800131e:	333f      	adds	r3, #63	; 0x3f
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	212c      	movs	r1, #44	; 0x2c
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	4413      	add	r3, r2
 8001332:	333f      	adds	r3, #63	; 0x3f
 8001334:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001336:	2b02      	cmp	r3, #2
 8001338:	d111      	bne.n	800135e <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fc4f 	bl	8002be8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	015a      	lsls	r2, r3, #5
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4413      	add	r3, r2
 8001352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001356:	461a      	mov	r2, r3
 8001358:	2310      	movs	r3, #16
 800135a:	6093      	str	r3, [r2, #8]
 800135c:	e03a      	b.n	80013d4 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	212c      	movs	r1, #44	; 0x2c
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	4413      	add	r3, r2
 800136a:	333f      	adds	r3, #63	; 0x3f
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d009      	beq.n	8001386 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	212c      	movs	r1, #44	; 0x2c
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	333f      	adds	r3, #63	; 0x3f
 8001380:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001382:	2b01      	cmp	r3, #1
 8001384:	d126      	bne.n	80013d4 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4413      	add	r3, r2
 800138e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	0151      	lsls	r1, r2, #5
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	440a      	add	r2, r1
 800139c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013a4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	212c      	movs	r1, #44	; 0x2c
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	3360      	adds	r3, #96	; 0x60
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	b2d9      	uxtb	r1, r3
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	202c      	movs	r0, #44	; 0x2c
 80013c2:	fb00 f303 	mul.w	r3, r0, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	3360      	adds	r3, #96	; 0x60
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f001 fe61 	bl	8003096 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d12b      	bne.n	8001434 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	212c      	movs	r1, #44	; 0x2c
 80013e2:	fb01 f303 	mul.w	r3, r1, r3
 80013e6:	4413      	add	r3, r2
 80013e8:	3348      	adds	r3, #72	; 0x48
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	202c      	movs	r0, #44	; 0x2c
 80013f2:	fb00 f202 	mul.w	r2, r0, r2
 80013f6:	440a      	add	r2, r1
 80013f8:	3240      	adds	r2, #64	; 0x40
 80013fa:	8812      	ldrh	r2, [r2, #0]
 80013fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 818e 	beq.w	8001726 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	212c      	movs	r1, #44	; 0x2c
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	4413      	add	r3, r2
 8001416:	3354      	adds	r3, #84	; 0x54
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f083 0301 	eor.w	r3, r3, #1
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	212c      	movs	r1, #44	; 0x2c
 8001426:	fb01 f303 	mul.w	r3, r1, r3
 800142a:	4413      	add	r3, r2
 800142c:	3354      	adds	r3, #84	; 0x54
 800142e:	4602      	mov	r2, r0
 8001430:	701a      	strb	r2, [r3, #0]
}
 8001432:	e178      	b.n	8001726 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	212c      	movs	r1, #44	; 0x2c
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	4413      	add	r3, r2
 8001440:	3354      	adds	r3, #84	; 0x54
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2d8      	uxtb	r0, r3
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	212c      	movs	r1, #44	; 0x2c
 8001450:	fb01 f303 	mul.w	r3, r1, r3
 8001454:	4413      	add	r3, r2
 8001456:	3354      	adds	r3, #84	; 0x54
 8001458:	4602      	mov	r2, r0
 800145a:	701a      	strb	r2, [r3, #0]
}
 800145c:	e163      	b.n	8001726 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4413      	add	r3, r2
 8001466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b02      	cmp	r3, #2
 8001472:	f040 80f6 	bne.w	8001662 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	212c      	movs	r1, #44	; 0x2c
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	4413      	add	r3, r2
 8001482:	3361      	adds	r3, #97	; 0x61
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d109      	bne.n	800149e <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	3360      	adds	r3, #96	; 0x60
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e0c9      	b.n	8001632 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	212c      	movs	r1, #44	; 0x2c
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	3361      	adds	r3, #97	; 0x61
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b05      	cmp	r3, #5
 80014b0:	d109      	bne.n	80014c6 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	212c      	movs	r1, #44	; 0x2c
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	3360      	adds	r3, #96	; 0x60
 80014c0:	2205      	movs	r2, #5
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e0b5      	b.n	8001632 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	212c      	movs	r1, #44	; 0x2c
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	3361      	adds	r3, #97	; 0x61
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d009      	beq.n	80014ee <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	212c      	movs	r1, #44	; 0x2c
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	3361      	adds	r3, #97	; 0x61
 80014e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d150      	bne.n	8001590 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	212c      	movs	r1, #44	; 0x2c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	335c      	adds	r3, #92	; 0x5c
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	202c      	movs	r0, #44	; 0x2c
 8001506:	fb00 f303 	mul.w	r3, r0, r3
 800150a:	440b      	add	r3, r1
 800150c:	335c      	adds	r3, #92	; 0x5c
 800150e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	335c      	adds	r3, #92	; 0x5c
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d912      	bls.n	800154a <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	212c      	movs	r1, #44	; 0x2c
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	335c      	adds	r3, #92	; 0x5c
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	4413      	add	r3, r2
 8001542:	3360      	adds	r3, #96	; 0x60
 8001544:	2204      	movs	r2, #4
 8001546:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001548:	e073      	b.n	8001632 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	212c      	movs	r1, #44	; 0x2c
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	3360      	adds	r3, #96	; 0x60
 8001558:	2202      	movs	r2, #2
 800155a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4413      	add	r3, r2
 8001564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001572:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800157a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4413      	add	r3, r2
 8001584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001588:	461a      	mov	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800158e:	e050      	b.n	8001632 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	212c      	movs	r1, #44	; 0x2c
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	4413      	add	r3, r2
 800159c:	3361      	adds	r3, #97	; 0x61
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d122      	bne.n	80015ea <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	212c      	movs	r1, #44	; 0x2c
 80015aa:	fb01 f303 	mul.w	r3, r1, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	3360      	adds	r3, #96	; 0x60
 80015b2:	2202      	movs	r2, #2
 80015b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e2:	461a      	mov	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e023      	b.n	8001632 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	212c      	movs	r1, #44	; 0x2c
 80015f0:	fb01 f303 	mul.w	r3, r1, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	3361      	adds	r3, #97	; 0x61
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b07      	cmp	r3, #7
 80015fc:	d119      	bne.n	8001632 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	212c      	movs	r1, #44	; 0x2c
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	4413      	add	r3, r2
 800160a:	335c      	adds	r3, #92	; 0x5c
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	202c      	movs	r0, #44	; 0x2c
 8001616:	fb00 f303 	mul.w	r3, r0, r3
 800161a:	440b      	add	r3, r1
 800161c:	335c      	adds	r3, #92	; 0x5c
 800161e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	3360      	adds	r3, #96	; 0x60
 800162e:	2204      	movs	r2, #4
 8001630:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	015a      	lsls	r2, r3, #5
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4413      	add	r3, r2
 800163a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800163e:	461a      	mov	r2, r3
 8001640:	2302      	movs	r3, #2
 8001642:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	b2d9      	uxtb	r1, r3
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	202c      	movs	r0, #44	; 0x2c
 800164e:	fb00 f303 	mul.w	r3, r0, r3
 8001652:	4413      	add	r3, r2
 8001654:	3360      	adds	r3, #96	; 0x60
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f001 fd1b 	bl	8003096 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001660:	e061      	b.n	8001726 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4413      	add	r3, r2
 800166a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b10      	cmp	r3, #16
 8001676:	d156      	bne.n	8001726 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	212c      	movs	r1, #44	; 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	333f      	adds	r3, #63	; 0x3f
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d111      	bne.n	80016b0 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	212c      	movs	r1, #44	; 0x2c
 8001692:	fb01 f303 	mul.w	r3, r1, r3
 8001696:	4413      	add	r3, r2
 8001698:	335c      	adds	r3, #92	; 0x5c
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fa9d 	bl	8002be8 <USB_HC_Halt>
 80016ae:	e031      	b.n	8001714 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	212c      	movs	r1, #44	; 0x2c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	333f      	adds	r3, #63	; 0x3f
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	212c      	movs	r1, #44	; 0x2c
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	333f      	adds	r3, #63	; 0x3f
 80016d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d11d      	bne.n	8001714 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	335c      	adds	r3, #92	; 0x5c
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d110      	bne.n	8001714 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	212c      	movs	r1, #44	; 0x2c
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	3361      	adds	r3, #97	; 0x61
 8001700:	2203      	movs	r2, #3
 8001702:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fa6a 	bl	8002be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	015a      	lsls	r2, r3, #5
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4413      	add	r3, r2
 800171c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001720:	461a      	mov	r2, r3
 8001722:	2310      	movs	r3, #16
 8001724:	6093      	str	r3, [r2, #8]
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b088      	sub	sp, #32
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	015a      	lsls	r2, r3, #5
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	4413      	add	r3, r2
 8001750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b04      	cmp	r3, #4
 800175c:	d11a      	bne.n	8001794 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4413      	add	r3, r2
 8001766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800176a:	461a      	mov	r2, r3
 800176c:	2304      	movs	r3, #4
 800176e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	212c      	movs	r1, #44	; 0x2c
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4413      	add	r3, r2
 800177c:	3361      	adds	r3, #97	; 0x61
 800177e:	2206      	movs	r2, #6
 8001780:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f001 fa2b 	bl	8002be8 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001792:	e331      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	4413      	add	r3, r2
 800179c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	2b20      	cmp	r3, #32
 80017a8:	d12e      	bne.n	8001808 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b6:	461a      	mov	r2, r3
 80017b8:	2320      	movs	r3, #32
 80017ba:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	333d      	adds	r3, #61	; 0x3d
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f040 8313 	bne.w	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	333d      	adds	r3, #61	; 0x3d
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	212c      	movs	r1, #44	; 0x2c
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	3360      	adds	r3, #96	; 0x60
 80017f2:	2202      	movs	r2, #2
 80017f4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f9f1 	bl	8002be8 <USB_HC_Halt>
}
 8001806:	e2f7      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	015a      	lsls	r2, r3, #5
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	4413      	add	r3, r2
 8001810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800181e:	d112      	bne.n	8001846 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	015a      	lsls	r2, r3, #5
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	4413      	add	r3, r2
 8001828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800182c:	461a      	mov	r2, r3
 800182e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001832:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f001 f9d2 	bl	8002be8 <USB_HC_Halt>
}
 8001844:	e2d8      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	015a      	lsls	r2, r3, #5
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4413      	add	r3, r2
 800184e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d140      	bne.n	80018de <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	212c      	movs	r1, #44	; 0x2c
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	335c      	adds	r3, #92	; 0x5c
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	015a      	lsls	r2, r3, #5
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4413      	add	r3, r2
 8001876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001880:	2b40      	cmp	r3, #64	; 0x40
 8001882:	d111      	bne.n	80018a8 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	212c      	movs	r1, #44	; 0x2c
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	333d      	adds	r3, #61	; 0x3d
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4413      	add	r3, r2
 800189e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a2:	461a      	mov	r2, r3
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b4:	461a      	mov	r2, r3
 80018b6:	2301      	movs	r3, #1
 80018b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	3361      	adds	r3, #97	; 0x61
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 f986 	bl	8002be8 <USB_HC_Halt>
}
 80018dc:	e28c      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f0:	2b40      	cmp	r3, #64	; 0x40
 80018f2:	d12c      	bne.n	800194e <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	3361      	adds	r3, #97	; 0x61
 8001902:	2204      	movs	r2, #4
 8001904:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	333d      	adds	r3, #61	; 0x3d
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	335c      	adds	r3, #92	; 0x5c
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f001 f957 	bl	8002be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4413      	add	r3, r2
 8001942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001946:	461a      	mov	r2, r3
 8001948:	2340      	movs	r3, #64	; 0x40
 800194a:	6093      	str	r3, [r2, #8]
}
 800194c:	e254      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4413      	add	r3, r2
 8001956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b08      	cmp	r3, #8
 8001962:	d11a      	bne.n	800199a <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	4413      	add	r3, r2
 800196c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001970:	461a      	mov	r2, r3
 8001972:	2308      	movs	r3, #8
 8001974:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3361      	adds	r3, #97	; 0x61
 8001984:	2205      	movs	r2, #5
 8001986:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f001 f928 	bl	8002be8 <USB_HC_Halt>
}
 8001998:	e22e      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	015a      	lsls	r2, r3, #5
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4413      	add	r3, r2
 80019a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	2b10      	cmp	r3, #16
 80019ae:	d140      	bne.n	8001a32 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	335c      	adds	r3, #92	; 0x5c
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3361      	adds	r3, #97	; 0x61
 80019d0:	2203      	movs	r2, #3
 80019d2:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	333d      	adds	r3, #61	; 0x3d
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d112      	bne.n	8001a0e <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	333c      	adds	r3, #60	; 0x3c
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d108      	bne.n	8001a0e <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	333d      	adds	r3, #61	; 0x3d
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 f8e5 	bl	8002be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2310      	movs	r3, #16
 8001a2e:	6093      	str	r3, [r2, #8]
}
 8001a30:	e1e2      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a44:	2b80      	cmp	r3, #128	; 0x80
 8001a46:	d164      	bne.n	8001b12 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d111      	bne.n	8001a74 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3361      	adds	r3, #97	; 0x61
 8001a5e:	2206      	movs	r2, #6
 8001a60:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 f8bb 	bl	8002be8 <USB_HC_Halt>
 8001a72:	e044      	b.n	8001afe <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	212c      	movs	r1, #44	; 0x2c
 8001a7a:	fb01 f303 	mul.w	r3, r1, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	335c      	adds	r3, #92	; 0x5c
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	202c      	movs	r0, #44	; 0x2c
 8001a8c:	fb00 f303 	mul.w	r3, r0, r3
 8001a90:	440b      	add	r3, r1
 8001a92:	335c      	adds	r3, #92	; 0x5c
 8001a94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	335c      	adds	r3, #92	; 0x5c
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d920      	bls.n	8001aec <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	212c      	movs	r1, #44	; 0x2c
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	335c      	adds	r3, #92	; 0x5c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3360      	adds	r3, #96	; 0x60
 8001aca:	2204      	movs	r2, #4
 8001acc:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	b2d9      	uxtb	r1, r3
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	202c      	movs	r0, #44	; 0x2c
 8001ad8:	fb00 f303 	mul.w	r3, r0, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3360      	adds	r3, #96	; 0x60
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f001 fad6 	bl	8003096 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001aea:	e008      	b.n	8001afe <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3360      	adds	r3, #96	; 0x60
 8001afa:	2202      	movs	r2, #2
 8001afc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	6093      	str	r3, [r2, #8]
}
 8001b10:	e172      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	015a      	lsls	r2, r3, #5
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4413      	add	r3, r2
 8001b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b28:	d11b      	bne.n	8001b62 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	3361      	adds	r3, #97	; 0x61
 8001b38:	2208      	movs	r2, #8
 8001b3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 f84e 	bl	8002be8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5e:	6093      	str	r3, [r2, #8]
}
 8001b60:	e14a      	b.n	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	f040 813f 	bne.w	8001df8 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3361      	adds	r3, #97	; 0x61
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d17d      	bne.n	8001c8a <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	212c      	movs	r1, #44	; 0x2c
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3360      	adds	r3, #96	; 0x60
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	212c      	movs	r1, #44	; 0x2c
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	333f      	adds	r3, #63	; 0x3f
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d00a      	beq.n	8001bca <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	212c      	movs	r1, #44	; 0x2c
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	333f      	adds	r3, #63	; 0x3f
 8001bc2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	f040 8100 	bne.w	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d113      	bne.n	8001bfa <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3355      	adds	r3, #85	; 0x55
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	f083 0301 	eor.w	r3, r3, #1
 8001be6:	b2d8      	uxtb	r0, r3
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3355      	adds	r3, #85	; 0x55
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	f040 80e3 	bne.w	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	334c      	adds	r3, #76	; 0x4c
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80d8 	beq.w	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	212c      	movs	r1, #44	; 0x2c
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	334c      	adds	r3, #76	; 0x4c
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	202c      	movs	r0, #44	; 0x2c
 8001c30:	fb00 f202 	mul.w	r2, r0, r2
 8001c34:	440a      	add	r2, r1
 8001c36:	3240      	adds	r2, #64	; 0x40
 8001c38:	8812      	ldrh	r2, [r2, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	202c      	movs	r0, #44	; 0x2c
 8001c44:	fb00 f202 	mul.w	r2, r0, r2
 8001c48:	440a      	add	r2, r1
 8001c4a:	3240      	adds	r2, #64	; 0x40
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80b5 	beq.w	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3355      	adds	r3, #85	; 0x55
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2d8      	uxtb	r0, r3
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	3355      	adds	r3, #85	; 0x55
 8001c84:	4602      	mov	r2, r0
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e09f      	b.n	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	3361      	adds	r3, #97	; 0x61
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d109      	bne.n	8001cb2 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3360      	adds	r3, #96	; 0x60
 8001cac:	2202      	movs	r2, #2
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e08b      	b.n	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3361      	adds	r3, #97	; 0x61
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d109      	bne.n	8001cda <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3360      	adds	r3, #96	; 0x60
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	e077      	b.n	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	212c      	movs	r1, #44	; 0x2c
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3361      	adds	r3, #97	; 0x61
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d109      	bne.n	8001d02 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	212c      	movs	r1, #44	; 0x2c
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3360      	adds	r3, #96	; 0x60
 8001cfc:	2205      	movs	r2, #5
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e063      	b.n	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3361      	adds	r3, #97	; 0x61
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d009      	beq.n	8001d2a <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3361      	adds	r3, #97	; 0x61
 8001d24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d14f      	bne.n	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	335c      	adds	r3, #92	; 0x5c
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	202c      	movs	r0, #44	; 0x2c
 8001d42:	fb00 f303 	mul.w	r3, r0, r3
 8001d46:	440b      	add	r3, r1
 8001d48:	335c      	adds	r3, #92	; 0x5c
 8001d4a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	335c      	adds	r3, #92	; 0x5c
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d912      	bls.n	8001d86 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	212c      	movs	r1, #44	; 0x2c
 8001d66:	fb01 f303 	mul.w	r3, r1, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	335c      	adds	r3, #92	; 0x5c
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3360      	adds	r3, #96	; 0x60
 8001d80:	2204      	movs	r2, #4
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e021      	b.n	8001dca <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3360      	adds	r3, #96	; 0x60
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dae:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001db6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2302      	movs	r3, #2
 8001dda:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	b2d9      	uxtb	r1, r3
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	202c      	movs	r0, #44	; 0x2c
 8001de6:	fb00 f303 	mul.w	r3, r0, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3360      	adds	r3, #96	; 0x60
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f001 f94f 	bl	8003096 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	0c5b      	lsrs	r3, r3, #17
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e34:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d004      	beq.n	8001e46 <HCD_RXQLVL_IRQHandler+0x46>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	f000 80a9 	beq.w	8001f96 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001e44:	e0aa      	b.n	8001f9c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a6 	beq.w	8001f9a <HCD_RXQLVL_IRQHandler+0x19a>
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3344      	adds	r3, #68	; 0x44
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 809b 	beq.w	8001f9a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3350      	adds	r3, #80	; 0x50
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	441a      	add	r2, r3
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	202c      	movs	r0, #44	; 0x2c
 8001e7e:	fb00 f303 	mul.w	r3, r0, r3
 8001e82:	440b      	add	r3, r1
 8001e84:	334c      	adds	r3, #76	; 0x4c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d87a      	bhi.n	8001f82 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3344      	adds	r3, #68	; 0x44
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f000 fddb 	bl	8002a60 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3344      	adds	r3, #68	; 0x44
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	441a      	add	r2, r3
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	202c      	movs	r0, #44	; 0x2c
 8001ec4:	fb00 f303 	mul.w	r3, r0, r3
 8001ec8:	440b      	add	r3, r1
 8001eca:	3344      	adds	r3, #68	; 0x44
 8001ecc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3350      	adds	r3, #80	; 0x50
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	441a      	add	r2, r3
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	202c      	movs	r0, #44	; 0x2c
 8001ee8:	fb00 f303 	mul.w	r3, r0, r3
 8001eec:	440b      	add	r3, r1
 8001eee:	3350      	adds	r3, #80	; 0x50
 8001ef0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	0cdb      	lsrs	r3, r3, #19
 8001f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f06:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3340      	adds	r3, #64	; 0x40
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d13c      	bne.n	8001f9a <HCD_RXQLVL_IRQHandler+0x19a>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d039      	beq.n	8001f9a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f3c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f44:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	461a      	mov	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	212c      	movs	r1, #44	; 0x2c
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	3354      	adds	r3, #84	; 0x54
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f083 0301 	eor.w	r3, r3, #1
 8001f6c:	b2d8      	uxtb	r0, r3
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3354      	adds	r3, #84	; 0x54
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	701a      	strb	r2, [r3, #0]
      break;
 8001f80:	e00b      	b.n	8001f9a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	212c      	movs	r1, #44	; 0x2c
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3360      	adds	r3, #96	; 0x60
 8001f90:	2204      	movs	r2, #4
 8001f92:	701a      	strb	r2, [r3, #0]
      break;
 8001f94:	e001      	b.n	8001f9a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001f96:	bf00      	nop
 8001f98:	e000      	b.n	8001f9c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001f9a:	bf00      	nop
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001fd0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d10b      	bne.n	8001ff4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f001 f839 	bl	800305e <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d132      	bne.n	8002064 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d126      	bne.n	800205e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d113      	bne.n	8002040 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800201e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002022:	d106      	bne.n	8002032 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2102      	movs	r1, #2
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fd91 	bl	8002b52 <USB_InitFSLSPClkSel>
 8002030:	e011      	b.n	8002056 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fd8a 	bl	8002b52 <USB_InitFSLSPClkSel>
 800203e:	e00a      	b.n	8002056 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800204e:	461a      	mov	r2, r3
 8002050:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002054:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f001 f82b 	bl	80030b2 <HAL_HCD_PortEnabled_Callback>
 800205c:	e002      	b.n	8002064 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f001 f835 	bl	80030ce <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b20      	cmp	r3, #32
 800206c:	d103      	bne.n	8002076 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f043 0320 	orr.w	r3, r3, #32
 8002074:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800207c:	461a      	mov	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e267      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d075      	beq.n	8002196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d00c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b85      	ldr	r3, [pc, #532]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d112      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b82      	ldr	r3, [pc, #520]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	4b7e      	ldr	r3, [pc, #504]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d05b      	beq.n	8002194 <HAL_RCC_OscConfig+0x108>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d157      	bne.n	8002194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e242      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x74>
 80020f2:	4b76      	ldr	r3, [pc, #472]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a75      	ldr	r2, [pc, #468]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6f      	ldr	r2, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b6d      	ldr	r3, [pc, #436]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6c      	ldr	r2, [pc, #432]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002124:	4b69      	ldr	r3, [pc, #420]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a68      	ldr	r2, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b66      	ldr	r3, [pc, #408]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe fbce 	bl	80008e4 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe fbca 	bl	80008e4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e207      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xc0>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe fbba 	bl	80008e4 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe fbb6 	bl	80008e4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1f3      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b51      	ldr	r3, [pc, #324]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0xe8>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a2:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b44      	ldr	r3, [pc, #272]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1c7      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4937      	ldr	r1, [pc, #220]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCC_OscConfig+0x244>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe fb6f 	bl	80008e4 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7fe fb6b 	bl	80008e4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1a8      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4925      	ldr	r1, [pc, #148]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_OscConfig+0x244>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fb4e 	bl	80008e4 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe fb4a 	bl	80008e4 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e187      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d036      	beq.n	80022e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_RCC_OscConfig+0x248>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fb2e 	bl	80008e4 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7fe fb2a 	bl	80008e4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e167      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_OscConfig+0x240>)
 80022a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x200>
 80022aa:	e01b      	b.n	80022e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_OscConfig+0x248>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7fe fb17 	bl	80008e4 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	e00e      	b.n	80022d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ba:	f7fe fb13 	bl	80008e4 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d907      	bls.n	80022d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e150      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	42470000 	.word	0x42470000
 80022d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ea      	bne.n	80022ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8097 	beq.w	8002420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10f      	bne.n	8002322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b7d      	ldr	r3, [pc, #500]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a7c      	ldr	r2, [pc, #496]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b77      	ldr	r3, [pc, #476]	; (8002500 <HAL_RCC_OscConfig+0x474>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b74      	ldr	r3, [pc, #464]	; (8002500 <HAL_RCC_OscConfig+0x474>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a73      	ldr	r2, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x474>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7fe fad3 	bl	80008e4 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7fe facf 	bl	80008e4 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e10c      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_OscConfig+0x474>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x2ea>
 8002368:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236c:	4a63      	ldr	r2, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6713      	str	r3, [r2, #112]	; 0x70
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x324>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x30c>
 800237e:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a5e      	ldr	r2, [pc, #376]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x324>
 8002398:	4b58      	ldr	r3, [pc, #352]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a57      	ldr	r2, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
 80023a4:	4b55      	ldr	r3, [pc, #340]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	4a54      	ldr	r2, [pc, #336]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80023aa:	f023 0304 	bic.w	r3, r3, #4
 80023ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fa94 	bl	80008e4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe fa90 	bl	80008e4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0cb      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0ee      	beq.n	80023c0 <HAL_RCC_OscConfig+0x334>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fe fa7e 	bl	80008e4 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe fa7a 	bl	80008e4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0b5      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002402:	4b3e      	ldr	r3, [pc, #248]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ee      	bne.n	80023ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	4a38      	ldr	r2, [pc, #224]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800241a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a1 	beq.w	800256c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800242a:	4b34      	ldr	r3, [pc, #208]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	d05c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d141      	bne.n	80024c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_RCC_OscConfig+0x478>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fa4e 	bl	80008e4 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fa4a 	bl	80008e4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e087      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	491b      	ldr	r1, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x478>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7fe fa23 	bl	80008e4 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7fe fa1f 	bl	80008e4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e05c      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x416>
 80024c0:	e054      	b.n	800256c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCC_OscConfig+0x478>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fa0c 	bl	80008e4 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fa08 	bl	80008e4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e045      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_OscConfig+0x470>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x444>
 80024ee:	e03d      	b.n	800256c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e038      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
 8002504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x4ec>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d028      	beq.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d121      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d11a      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002538:	4013      	ands	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800253e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002540:	4293      	cmp	r3, r2
 8002542:	d111      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	3b01      	subs	r3, #1
 8002552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d107      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cc      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d044      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d119      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e067      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b37      	ldr	r3, [pc, #220]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe f93a 	bl	80008e4 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe f936 	bl	80008e4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20c      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe f89a 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	080031e8 	.word	0x080031e8
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800274c:	b094      	sub	sp, #80	; 0x50
 800274e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
 8002754:	2300      	movs	r3, #0
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002758:	2300      	movs	r3, #0
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002760:	4b79      	ldr	r3, [pc, #484]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d00d      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x40>
 800276c:	2b08      	cmp	r3, #8
 800276e:	f200 80e1 	bhi.w	8002934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x3a>
 800277a:	e0db      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_GetSysClockFreq+0x204>)
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002780:	e0db      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002782:	4b73      	ldr	r3, [pc, #460]	; (8002950 <HAL_RCC_GetSysClockFreq+0x208>)
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002786:	e0d8      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002788:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002792:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	2200      	movs	r2, #0
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
 80027b2:	2300      	movs	r3, #0
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
 80027b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027ba:	4622      	mov	r2, r4
 80027bc:	462b      	mov	r3, r5
 80027be:	f04f 0000 	mov.w	r0, #0
 80027c2:	f04f 0100 	mov.w	r1, #0
 80027c6:	0159      	lsls	r1, r3, #5
 80027c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027cc:	0150      	lsls	r0, r2, #5
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4621      	mov	r1, r4
 80027d4:	1a51      	subs	r1, r2, r1
 80027d6:	6139      	str	r1, [r7, #16]
 80027d8:	4629      	mov	r1, r5
 80027da:	eb63 0301 	sbc.w	r3, r3, r1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027ec:	4659      	mov	r1, fp
 80027ee:	018b      	lsls	r3, r1, #6
 80027f0:	4651      	mov	r1, sl
 80027f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f6:	4651      	mov	r1, sl
 80027f8:	018a      	lsls	r2, r1, #6
 80027fa:	4651      	mov	r1, sl
 80027fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002800:	4659      	mov	r1, fp
 8002802:	eb63 0901 	sbc.w	r9, r3, r1
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800281a:	4690      	mov	r8, r2
 800281c:	4699      	mov	r9, r3
 800281e:	4623      	mov	r3, r4
 8002820:	eb18 0303 	adds.w	r3, r8, r3
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	462b      	mov	r3, r5
 8002828:	eb49 0303 	adc.w	r3, r9, r3
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800283a:	4629      	mov	r1, r5
 800283c:	024b      	lsls	r3, r1, #9
 800283e:	4621      	mov	r1, r4
 8002840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002844:	4621      	mov	r1, r4
 8002846:	024a      	lsls	r2, r1, #9
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284e:	2200      	movs	r2, #0
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
 8002852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002858:	f7fd fcb6 	bl	80001c8 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002864:	e058      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	2200      	movs	r2, #0
 800286e:	4618      	mov	r0, r3
 8002870:	4611      	mov	r1, r2
 8002872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
 800287c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002880:	4642      	mov	r2, r8
 8002882:	464b      	mov	r3, r9
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	0159      	lsls	r1, r3, #5
 800288e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002892:	0150      	lsls	r0, r2, #5
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4641      	mov	r1, r8
 800289a:	ebb2 0a01 	subs.w	sl, r2, r1
 800289e:	4649      	mov	r1, r9
 80028a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b8:	ebb2 040a 	subs.w	r4, r2, sl
 80028bc:	eb63 050b 	sbc.w	r5, r3, fp
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	00eb      	lsls	r3, r5, #3
 80028ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ce:	00e2      	lsls	r2, r4, #3
 80028d0:	4614      	mov	r4, r2
 80028d2:	461d      	mov	r5, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	18e3      	adds	r3, r4, r3
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	464b      	mov	r3, r9
 80028dc:	eb45 0303 	adc.w	r3, r5, r3
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ee:	4629      	mov	r1, r5
 80028f0:	028b      	lsls	r3, r1, #10
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f8:	4621      	mov	r1, r4
 80028fa:	028a      	lsls	r2, r1, #10
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	2200      	movs	r2, #0
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	61fa      	str	r2, [r7, #28]
 8002908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800290c:	f7fd fc5c 	bl	80001c8 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	3301      	adds	r3, #1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002932:	e002      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetSysClockFreq+0x204>)
 8002936:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800293c:	4618      	mov	r0, r3
 800293e:	3750      	adds	r7, #80	; 0x50
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	00f42400 	.word	0x00f42400
 8002950:	007a1200 	.word	0x007a1200

08002954 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f043 0201 	orr.w	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0201 	bic.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3301      	adds	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a13      	ldr	r2, [pc, #76]	; (80029fc <USB_FlushTxFifo+0x64>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e01b      	b.n	80029f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	daf2      	bge.n	80029a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	019b      	lsls	r3, r3, #6
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3301      	adds	r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a08      	ldr	r2, [pc, #32]	; (80029fc <USB_FlushTxFifo+0x64>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e006      	b.n	80029f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d0f0      	beq.n	80029d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	00030d40 	.word	0x00030d40

08002a00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <USB_FlushRxFifo+0x5c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e018      	b.n	8002a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	daf2      	bge.n	8002a0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3301      	adds	r3, #1
 8002a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <USB_FlushRxFifo+0x5c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e006      	b.n	8002a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d0f0      	beq.n	8002a30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	00030d40 	.word	0x00030d40

08002a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b08b      	sub	sp, #44	; 0x2c
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
 8002a8a:	e014      	b.n	8002ab6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	601a      	str	r2, [r3, #0]
    pDest++;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	3301      	adds	r3, #1
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3e6      	bcc.n	8002a8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8002abe:	8bfb      	ldrh	r3, [r7, #30]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01e      	beq.n	8002b02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	701a      	strb	r2, [r3, #0]
      i++;
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	3301      	adds	r3, #1
 8002aee:	623b      	str	r3, [r7, #32]
      pDest++;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	3301      	adds	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8002af6:	8bfb      	ldrh	r3, [r7, #30]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002afc:	8bfb      	ldrh	r3, [r7, #30]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ea      	bne.n	8002ad8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	372c      	adds	r7, #44	; 0x2c
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002b28:	68fb      	ldr	r3, [r7, #12]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0301 	and.w	r3, r3, #1
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b70:	f023 0303 	bic.w	r3, r3, #3
 8002b74:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002ba0:	6053      	str	r3, [r2, #4]
 8002ba2:	e009      	b.n	8002bb8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d106      	bne.n	8002bb8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f241 7370 	movw	r3, #6000	; 0x1770
 8002bb6:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	b29b      	uxth	r3, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0c9b      	lsrs	r3, r3, #18
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0fdb      	lsrs	r3, r3, #31
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d104      	bne.n	8002c42 <USB_HC_Halt+0x5a>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e0c8      	b.n	8002dd4 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <USB_HC_Halt+0x66>
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d163      	bne.n	8002d16 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	0151      	lsls	r1, r2, #5
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	440a      	add	r2, r1
 8002c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c6c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 80ab 	bne.w	8002dd2 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d133      	bne.n	8002cf0 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ca6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cc6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd4:	d81d      	bhi.n	8002d12 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cec:	d0ec      	beq.n	8002cc8 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002cee:	e070      	b.n	8002dd2 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	0151      	lsls	r1, r2, #5
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	440a      	add	r2, r1
 8002d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d0e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002d10:	e05f      	b.n	8002dd2 <USB_HC_Halt+0x1ea>
            break;
 8002d12:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002d14:	e05d      	b.n	8002dd2 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	0151      	lsls	r1, r2, #5
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	440a      	add	r2, r1
 8002d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d34:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d133      	bne.n	8002dae <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	0151      	lsls	r1, r2, #5
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	440a      	add	r2, r1
 8002d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d64:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	0151      	lsls	r1, r2, #5
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	440a      	add	r2, r1
 8002d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d84:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d92:	d81d      	bhi.n	8002dd0 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002daa:	d0ec      	beq.n	8002d86 <USB_HC_Halt+0x19e>
 8002dac:	e011      	b.n	8002dd2 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	0151      	lsls	r1, r2, #5
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	440a      	add	r2, r1
 8002dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e000      	b.n	8002dd2 <USB_HC_Halt+0x1ea>
          break;
 8002dd0:	bf00      	nop
    }
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3724      	adds	r7, #36	; 0x24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fdbe 	bl	8002976 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fdcb 	bl	8002998 <USB_FlushTxFifo>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff fdf7 	bl	8002a00 <USB_FlushRxFifo>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e01f      	b.n	8002e62 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	461a      	mov	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b0f      	cmp	r3, #15
 8002e66:	d9dc      	bls.n	8002e22 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	e034      	b.n	8002ed8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e84:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e94:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb4:	d80c      	bhi.n	8002ed0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ecc:	d0ec      	beq.n	8002ea8 <USB_StopHost+0xc8>
 8002ece:	e000      	b.n	8002ed2 <USB_StopHost+0xf2>
        break;
 8002ed0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	d9c7      	bls.n	8002e6e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fd2d 	bl	8002954 <USB_EnableGlobalInt>

  return ret;
 8002efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f804 	bl	8002f28 <USBH_HandleSof>
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b0b      	cmp	r3, #11
 8002f38:	d10a      	bne.n	8002f50 <USBH_HandleSof+0x28>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
  }
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002f68:	bf00      	nop
}
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002f84:	bf00      	nop
}
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f883 	bl	80030ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	791b      	ldrb	r3, [r3, #4]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f80b 	bl	8003006 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	795b      	ldrb	r3, [r3, #5]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f805 	bl	8003006 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d80d      	bhi.n	8003034 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	33e0      	adds	r3, #224	; 0xe0
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	33e0      	adds	r3, #224	; 0xe0
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff57 	bl	8002f04 <USBH_LL_IncTimer>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff8f 	bl	8002f90 <USBH_LL_Connect>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff98 	bl	8002fbe <USBH_LL_Disconnect>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	70fb      	strb	r3, [r7, #3]
 80030a2:	4613      	mov	r3, r2
 80030a4:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff49 	bl	8002f58 <USBH_LL_PortEnabled>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff49 	bl	8002f74 <USBH_LL_PortDisabled>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd ffa2 	bl	800104a <HAL_HCD_Stop>
 8003106:	4603      	mov	r3, r0
 8003108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f807 	bl	8003120 <USBH_Get_USB_Status>
 8003112:	4603      	mov	r3, r0
 8003114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003116:	7bbb      	ldrb	r3, [r7, #14]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d817      	bhi.n	8003164 <USBH_Get_USB_Status+0x44>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <USBH_Get_USB_Status+0x1c>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	0800314d 	.word	0x0800314d
 8003140:	08003153 	.word	0x08003153
 8003144:	08003159 	.word	0x08003159
 8003148:	0800315f 	.word	0x0800315f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
    break;
 8003150:	e00b      	b.n	800316a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8003152:	2302      	movs	r3, #2
 8003154:	73fb      	strb	r3, [r7, #15]
    break;
 8003156:	e008      	b.n	800316a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
    break;
 800315c:	e005      	b.n	800316a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800315e:	2302      	movs	r3, #2
 8003160:	73fb      	strb	r3, [r7, #15]
    break;
 8003162:	e002      	b.n	800316a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003164:	2302      	movs	r3, #2
 8003166:	73fb      	strb	r3, [r7, #15]
    break;
 8003168:	bf00      	nop
  }
  return usb_status;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <__libc_init_array>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4d0d      	ldr	r5, [pc, #52]	; (80031b0 <__libc_init_array+0x38>)
 800317c:	4c0d      	ldr	r4, [pc, #52]	; (80031b4 <__libc_init_array+0x3c>)
 800317e:	1b64      	subs	r4, r4, r5
 8003180:	10a4      	asrs	r4, r4, #2
 8003182:	2600      	movs	r6, #0
 8003184:	42a6      	cmp	r6, r4
 8003186:	d109      	bne.n	800319c <__libc_init_array+0x24>
 8003188:	4d0b      	ldr	r5, [pc, #44]	; (80031b8 <__libc_init_array+0x40>)
 800318a:	4c0c      	ldr	r4, [pc, #48]	; (80031bc <__libc_init_array+0x44>)
 800318c:	f000 f820 	bl	80031d0 <_init>
 8003190:	1b64      	subs	r4, r4, r5
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	2600      	movs	r6, #0
 8003196:	42a6      	cmp	r6, r4
 8003198:	d105      	bne.n	80031a6 <__libc_init_array+0x2e>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a0:	4798      	blx	r3
 80031a2:	3601      	adds	r6, #1
 80031a4:	e7ee      	b.n	8003184 <__libc_init_array+0xc>
 80031a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031aa:	4798      	blx	r3
 80031ac:	3601      	adds	r6, #1
 80031ae:	e7f2      	b.n	8003196 <__libc_init_array+0x1e>
 80031b0:	08003200 	.word	0x08003200
 80031b4:	08003200 	.word	0x08003200
 80031b8:	08003200 	.word	0x08003200
 80031bc:	08003204 	.word	0x08003204

080031c0 <memset>:
 80031c0:	4402      	add	r2, r0
 80031c2:	4603      	mov	r3, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <_init>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr

080031dc <_fini>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr
