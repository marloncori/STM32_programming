
Potentiometer_Leds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000219c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800225c  0800225c  0001225c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002290  08002290  00012290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080022a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000960  20000010  080022b0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000970  080022b0  00020970  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009830  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b1c  00000000  00000000  00029868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d2c  00000000  00000000  0002b384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000700  00000000  00000000  0002f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008c0  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003edc  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002bfa  00000000  00000000  00033f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00036b46  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001308  00000000  00000000  00036bc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002244 	.word	0x08002244

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002244 	.word	0x08002244

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__udivmoddi4>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	4657      	mov	r7, sl
 800028c:	464e      	mov	r6, r9
 800028e:	4645      	mov	r5, r8
 8000290:	46de      	mov	lr, fp
 8000292:	b5e0      	push	{r5, r6, r7, lr}
 8000294:	0004      	movs	r4, r0
 8000296:	b083      	sub	sp, #12
 8000298:	000d      	movs	r5, r1
 800029a:	4692      	mov	sl, r2
 800029c:	4699      	mov	r9, r3
 800029e:	428b      	cmp	r3, r1
 80002a0:	d82f      	bhi.n	8000302 <__udivmoddi4+0x7a>
 80002a2:	d02c      	beq.n	80002fe <__udivmoddi4+0x76>
 80002a4:	4649      	mov	r1, r9
 80002a6:	4650      	mov	r0, sl
 80002a8:	f000 f8ae 	bl	8000408 <__clzdi2>
 80002ac:	0029      	movs	r1, r5
 80002ae:	0006      	movs	r6, r0
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 f8a9 	bl	8000408 <__clzdi2>
 80002b6:	1a33      	subs	r3, r6, r0
 80002b8:	4698      	mov	r8, r3
 80002ba:	3b20      	subs	r3, #32
 80002bc:	469b      	mov	fp, r3
 80002be:	d500      	bpl.n	80002c2 <__udivmoddi4+0x3a>
 80002c0:	e074      	b.n	80003ac <__udivmoddi4+0x124>
 80002c2:	4653      	mov	r3, sl
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	001f      	movs	r7, r3
 80002ca:	4653      	mov	r3, sl
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	001e      	movs	r6, r3
 80002d2:	42af      	cmp	r7, r5
 80002d4:	d829      	bhi.n	800032a <__udivmoddi4+0xa2>
 80002d6:	d026      	beq.n	8000326 <__udivmoddi4+0x9e>
 80002d8:	465b      	mov	r3, fp
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	41bd      	sbcs	r5, r7
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da00      	bge.n	80002e4 <__udivmoddi4+0x5c>
 80002e2:	e079      	b.n	80003d8 <__udivmoddi4+0x150>
 80002e4:	2200      	movs	r2, #0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	465a      	mov	r2, fp
 80002f0:	4093      	lsls	r3, r2
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	4642      	mov	r2, r8
 80002f8:	4093      	lsls	r3, r2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	e019      	b.n	8000332 <__udivmoddi4+0xaa>
 80002fe:	4282      	cmp	r2, r0
 8000300:	d9d0      	bls.n	80002a4 <__udivmoddi4+0x1c>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <__udivmoddi4+0x8c>
 8000310:	601c      	str	r4, [r3, #0]
 8000312:	605d      	str	r5, [r3, #4]
 8000314:	9800      	ldr	r0, [sp, #0]
 8000316:	9901      	ldr	r1, [sp, #4]
 8000318:	b003      	add	sp, #12
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	42a3      	cmp	r3, r4
 8000328:	d9d6      	bls.n	80002d8 <__udivmoddi4+0x50>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0x82>
 8000338:	07fb      	lsls	r3, r7, #31
 800033a:	0872      	lsrs	r2, r6, #1
 800033c:	431a      	orrs	r2, r3
 800033e:	4646      	mov	r6, r8
 8000340:	087b      	lsrs	r3, r7, #1
 8000342:	e00e      	b.n	8000362 <__udivmoddi4+0xda>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d101      	bne.n	800034c <__udivmoddi4+0xc4>
 8000348:	42a2      	cmp	r2, r4
 800034a:	d80c      	bhi.n	8000366 <__udivmoddi4+0xde>
 800034c:	1aa4      	subs	r4, r4, r2
 800034e:	419d      	sbcs	r5, r3
 8000350:	2001      	movs	r0, #1
 8000352:	1924      	adds	r4, r4, r4
 8000354:	416d      	adcs	r5, r5
 8000356:	2100      	movs	r1, #0
 8000358:	3e01      	subs	r6, #1
 800035a:	1824      	adds	r4, r4, r0
 800035c:	414d      	adcs	r5, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d006      	beq.n	8000370 <__udivmoddi4+0xe8>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d9ee      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000366:	3e01      	subs	r6, #1
 8000368:	1924      	adds	r4, r4, r4
 800036a:	416d      	adcs	r5, r5
 800036c:	2e00      	cmp	r6, #0
 800036e:	d1f8      	bne.n	8000362 <__udivmoddi4+0xda>
 8000370:	465b      	mov	r3, fp
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	1900      	adds	r0, r0, r4
 8000378:	4169      	adcs	r1, r5
 800037a:	2b00      	cmp	r3, #0
 800037c:	db22      	blt.n	80003c4 <__udivmoddi4+0x13c>
 800037e:	002b      	movs	r3, r5
 8000380:	465a      	mov	r2, fp
 8000382:	40d3      	lsrs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	4644      	mov	r4, r8
 8000388:	40e2      	lsrs	r2, r4
 800038a:	001c      	movs	r4, r3
 800038c:	465b      	mov	r3, fp
 800038e:	0015      	movs	r5, r2
 8000390:	2b00      	cmp	r3, #0
 8000392:	db2c      	blt.n	80003ee <__udivmoddi4+0x166>
 8000394:	0026      	movs	r6, r4
 8000396:	409e      	lsls	r6, r3
 8000398:	0033      	movs	r3, r6
 800039a:	0026      	movs	r6, r4
 800039c:	4647      	mov	r7, r8
 800039e:	40be      	lsls	r6, r7
 80003a0:	0032      	movs	r2, r6
 80003a2:	1a80      	subs	r0, r0, r2
 80003a4:	4199      	sbcs	r1, r3
 80003a6:	9000      	str	r0, [sp, #0]
 80003a8:	9101      	str	r1, [sp, #4]
 80003aa:	e7ae      	b.n	800030a <__udivmoddi4+0x82>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	431f      	orrs	r7, r3
 80003c2:	e782      	b.n	80002ca <__udivmoddi4+0x42>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	002a      	movs	r2, r5
 80003cc:	4646      	mov	r6, r8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0023      	movs	r3, r4
 80003d2:	40f3      	lsrs	r3, r6
 80003d4:	4313      	orrs	r3, r2
 80003d6:	e7d5      	b.n	8000384 <__udivmoddi4+0xfc>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	9100      	str	r1, [sp, #0]
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	e782      	b.n	80002f4 <__udivmoddi4+0x6c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	2320      	movs	r3, #32
 80003f2:	0026      	movs	r6, r4
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	002f      	movs	r7, r5
 80003fa:	46b4      	mov	ip, r6
 80003fc:	4097      	lsls	r7, r2
 80003fe:	4666      	mov	r6, ip
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c9      	b.n	800039a <__udivmoddi4+0x112>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000460:	20fa      	movs	r0, #250	; 0xfa
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <HAL_InitTick+0x3c>)
 8000464:	0080      	lsls	r0, r0, #2
 8000466:	7819      	ldrb	r1, [r3, #0]
 8000468:	f7ff fe62 	bl	8000130 <__udivsi3>
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <HAL_InitTick+0x40>)
 800046e:	0001      	movs	r1, r0
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	f7ff fe5d 	bl	8000130 <__udivsi3>
 8000476:	f000 fb37 	bl	8000ae8 <HAL_SYSTICK_Config>
 800047a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 800047c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800047e:	2c00      	cmp	r4, #0
 8000480:	d109      	bne.n	8000496 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000482:	2d03      	cmp	r5, #3
 8000484:	d807      	bhi.n	8000496 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000486:	3802      	subs	r0, #2
 8000488:	0022      	movs	r2, r4
 800048a:	0029      	movs	r1, r5
 800048c:	f000 faf2 	bl	8000a74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000490:	0020      	movs	r0, r4
 8000492:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <HAL_InitTick+0x44>)
 8000494:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	20000000 	.word	0x20000000
 800049c:	2000000c 	.word	0x2000000c
 80004a0:	20000004 	.word	0x20000004

080004a4 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004a4:	2340      	movs	r3, #64	; 0x40
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <HAL_Init+0x24>)
{
 80004a8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004aa:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ac:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004ae:	430b      	orrs	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004b2:	f7ff ffd3 	bl	800045c <HAL_InitTick>
 80004b6:	1e04      	subs	r4, r0, #0
 80004b8:	d103      	bne.n	80004c2 <HAL_Init+0x1e>
    HAL_MspInit();
 80004ba:	f001 fdab 	bl	8002014 <HAL_MspInit>
}
 80004be:	0020      	movs	r0, r4
 80004c0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004c2:	2401      	movs	r4, #1
 80004c4:	e7fb      	b.n	80004be <HAL_Init+0x1a>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40022000 	.word	0x40022000

080004cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <HAL_IncTick+0x10>)
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <HAL_IncTick+0x14>)
 80004d0:	6811      	ldr	r1, [r2, #0]
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	185b      	adds	r3, r3, r1
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	4770      	bx	lr
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000030 	.word	0x20000030
 80004e0:	20000000 	.word	0x20000000

080004e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004e4:	4b01      	ldr	r3, [pc, #4]	; (80004ec <HAL_GetTick+0x8>)
 80004e6:	6818      	ldr	r0, [r3, #0]
}
 80004e8:	4770      	bx	lr
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	20000030 	.word	0x20000030

080004f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004f4:	f7ff fff6 	bl	80004e4 <HAL_GetTick>
 80004f8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004fa:	1c63      	adds	r3, r4, #1
 80004fc:	d002      	beq.n	8000504 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80004fe:	4b04      	ldr	r3, [pc, #16]	; (8000510 <HAL_Delay+0x20>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000504:	f7ff ffee 	bl	80004e4 <HAL_GetTick>
 8000508:	1b40      	subs	r0, r0, r5
 800050a:	4284      	cmp	r4, r0
 800050c:	d8fa      	bhi.n	8000504 <HAL_Delay+0x14>
  {
  }
}
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	20000000 	.word	0x20000000

08000514 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <ADC_DelayMicroSecond+0x24>)
{
 8000516:	b513      	push	{r0, r1, r4, lr}
 8000518:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800051a:	4908      	ldr	r1, [pc, #32]	; (800053c <ADC_DelayMicroSecond+0x28>)
 800051c:	6818      	ldr	r0, [r3, #0]
 800051e:	f7ff fe07 	bl	8000130 <__udivsi3>
 8000522:	4344      	muls	r4, r0
 8000524:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8000526:	9b01      	ldr	r3, [sp, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d100      	bne.n	800052e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800052c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800052e:	9b01      	ldr	r3, [sp, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	e7f7      	b.n	8000526 <ADC_DelayMicroSecond+0x12>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	2000000c 	.word	0x2000000c
 800053c:	000f4240 	.word	0x000f4240

08000540 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000540:	2103      	movs	r1, #3
 8000542:	6803      	ldr	r3, [r0, #0]
{
 8000544:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000546:	689a      	ldr	r2, [r3, #8]
{
 8000548:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800054a:	400a      	ands	r2, r1
 800054c:	2a01      	cmp	r2, #1
 800054e:	d10d      	bne.n	800056c <ADC_Enable+0x2c>
 8000550:	6819      	ldr	r1, [r3, #0]
 8000552:	4211      	tst	r1, r2
 8000554:	d00a      	beq.n	800056c <ADC_Enable+0x2c>
  return HAL_OK;
 8000556:	2000      	movs	r0, #0
}
 8000558:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800055a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800055c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800055e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000560:	4313      	orrs	r3, r2
 8000562:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000564:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000566:	4303      	orrs	r3, r0
 8000568:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800056a:	e7f5      	b.n	8000558 <ADC_Enable+0x18>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800056c:	6899      	ldr	r1, [r3, #8]
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <ADC_Enable+0x6c>)
 8000570:	4211      	tst	r1, r2
 8000572:	d1f2      	bne.n	800055a <ADC_Enable+0x1a>
    __HAL_ADC_ENABLE(hadc);
 8000574:	2501      	movs	r5, #1
 8000576:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000578:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800057a:	432a      	orrs	r2, r5
 800057c:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800057e:	f7ff ffc9 	bl	8000514 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8000582:	f7ff ffaf 	bl	80004e4 <HAL_GetTick>
 8000586:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	422b      	tst	r3, r5
 800058e:	d1e2      	bne.n	8000556 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000590:	f7ff ffa8 	bl	80004e4 <HAL_GetTick>
 8000594:	1b80      	subs	r0, r0, r6
 8000596:	280a      	cmp	r0, #10
 8000598:	d9f6      	bls.n	8000588 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800059a:	2310      	movs	r3, #16
 800059c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800059e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005a0:	4313      	orrs	r3, r2
 80005a2:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80005a6:	431d      	orrs	r5, r3
 80005a8:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 80005aa:	e7d5      	b.n	8000558 <ADC_Enable+0x18>
 80005ac:	80000017 	.word	0x80000017

080005b0 <HAL_ADC_Init>:
{
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80005b4:	2001      	movs	r0, #1
  if(hadc == NULL)
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	d019      	beq.n	80005ee <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d106      	bne.n	80005ce <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80005c0:	0022      	movs	r2, r4
 80005c2:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80005c4:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 80005c6:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80005c8:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80005ca:	f001 fd31 	bl	8002030 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80005ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80005d0:	06db      	lsls	r3, r3, #27
 80005d2:	d404      	bmi.n	80005de <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80005d4:	2204      	movs	r2, #4
 80005d6:	6823      	ldr	r3, [r4, #0]
 80005d8:	6898      	ldr	r0, [r3, #8]
 80005da:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80005dc:	d008      	beq.n	80005f0 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005de:	2310      	movs	r3, #16
 80005e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80005e2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005e4:	4313      	orrs	r3, r2
 80005e6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80005e8:	2300      	movs	r3, #0
 80005ea:	3450      	adds	r4, #80	; 0x50
 80005ec:	7023      	strb	r3, [r4, #0]
}
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80005f0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80005f2:	4955      	ldr	r1, [pc, #340]	; (8000748 <HAL_ADC_Init+0x198>)
 80005f4:	4011      	ands	r1, r2
 80005f6:	2202      	movs	r2, #2
 80005f8:	430a      	orrs	r2, r1
 80005fa:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005fc:	2203      	movs	r2, #3
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	4011      	ands	r1, r2
 8000602:	4a52      	ldr	r2, [pc, #328]	; (800074c <HAL_ADC_Init+0x19c>)
 8000604:	2901      	cmp	r1, #1
 8000606:	d102      	bne.n	800060e <HAL_ADC_Init+0x5e>
 8000608:	681d      	ldr	r5, [r3, #0]
 800060a:	420d      	tst	r5, r1
 800060c:	d119      	bne.n	8000642 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800060e:	2680      	movs	r6, #128	; 0x80
 8000610:	6865      	ldr	r5, [r4, #4]
 8000612:	05f6      	lsls	r6, r6, #23
 8000614:	0069      	lsls	r1, r5, #1
 8000616:	0849      	lsrs	r1, r1, #1
 8000618:	42b1      	cmp	r1, r6
 800061a:	d003      	beq.n	8000624 <HAL_ADC_Init+0x74>
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	0609      	lsls	r1, r1, #24
 8000620:	428d      	cmp	r5, r1
 8000622:	d176      	bne.n	8000712 <HAL_ADC_Init+0x162>
 8000624:	6919      	ldr	r1, [r3, #16]
 8000626:	0089      	lsls	r1, r1, #2
 8000628:	0889      	lsrs	r1, r1, #2
 800062a:	6119      	str	r1, [r3, #16]
 800062c:	6919      	ldr	r1, [r3, #16]
 800062e:	430d      	orrs	r5, r1
 8000630:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000632:	2518      	movs	r5, #24
 8000634:	68d9      	ldr	r1, [r3, #12]
 8000636:	43a9      	bics	r1, r5
 8000638:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800063a:	68d9      	ldr	r1, [r3, #12]
 800063c:	68a5      	ldr	r5, [r4, #8]
 800063e:	4329      	orrs	r1, r5
 8000640:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000642:	6811      	ldr	r1, [r2, #0]
 8000644:	4d42      	ldr	r5, [pc, #264]	; (8000750 <HAL_ADC_Init+0x1a0>)
 8000646:	4029      	ands	r1, r5
 8000648:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800064a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800064c:	6815      	ldr	r5, [r2, #0]
 800064e:	0649      	lsls	r1, r1, #25
 8000650:	4329      	orrs	r1, r5
 8000652:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	6899      	ldr	r1, [r3, #8]
 8000658:	0552      	lsls	r2, r2, #21
 800065a:	4211      	tst	r1, r2
 800065c:	d102      	bne.n	8000664 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800065e:	6899      	ldr	r1, [r3, #8]
 8000660:	430a      	orrs	r2, r1
 8000662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000664:	68da      	ldr	r2, [r3, #12]
 8000666:	493b      	ldr	r1, [pc, #236]	; (8000754 <HAL_ADC_Init+0x1a4>)
 8000668:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800066a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800066c:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800066e:	68dd      	ldr	r5, [r3, #12]
 8000670:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000672:	2902      	cmp	r1, #2
 8000674:	d100      	bne.n	8000678 <HAL_ADC_Init+0xc8>
 8000676:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000678:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800067a:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800067c:	4332      	orrs	r2, r6
 800067e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000680:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000682:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000684:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000686:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000688:	69e5      	ldr	r5, [r4, #28]
 800068a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800068c:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800068e:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000690:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000692:	0025      	movs	r5, r4
 8000694:	352c      	adds	r5, #44	; 0x2c
 8000696:	782d      	ldrb	r5, [r5, #0]
 8000698:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800069a:	432a      	orrs	r2, r5
 800069c:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800069e:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80006a0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006a4:	30ff      	adds	r0, #255	; 0xff
 80006a6:	4282      	cmp	r2, r0
 80006a8:	d004      	beq.n	80006b4 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80006aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80006ac:	68d8      	ldr	r0, [r3, #12]
 80006ae:	432a      	orrs	r2, r5
 80006b0:	4302      	orrs	r2, r0
 80006b2:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006b4:	1ca2      	adds	r2, r4, #2
 80006b6:	7fd2      	ldrb	r2, [r2, #31]
 80006b8:	2a01      	cmp	r2, #1
 80006ba:	d106      	bne.n	80006ca <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80006bc:	2900      	cmp	r1, #0
 80006be:	d134      	bne.n	800072a <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	68d9      	ldr	r1, [r3, #12]
 80006c4:	0252      	lsls	r2, r2, #9
 80006c6:	430a      	orrs	r2, r1
 80006c8:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80006ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80006cc:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 80006ce:	2901      	cmp	r1, #1
 80006d0:	d133      	bne.n	800073a <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80006d2:	4821      	ldr	r0, [pc, #132]	; (8000758 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80006d4:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80006d6:	4002      	ands	r2, r0
 80006d8:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80006da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80006dc:	6918      	ldr	r0, [r3, #16]
 80006de:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80006e0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80006e2:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80006e4:	4302      	orrs	r2, r0
 80006e6:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80006e8:	691a      	ldr	r2, [r3, #16]
 80006ea:	4311      	orrs	r1, r2
 80006ec:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80006ee:	2107      	movs	r1, #7
 80006f0:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80006f2:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80006f4:	438a      	bics	r2, r1
 80006f6:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80006fc:	430a      	orrs	r2, r1
 80006fe:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8000700:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000702:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000704:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000706:	4393      	bics	r3, r2
 8000708:	001a      	movs	r2, r3
 800070a:	2301      	movs	r3, #1
 800070c:	4313      	orrs	r3, r2
 800070e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000710:	e76d      	b.n	80005ee <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000712:	6919      	ldr	r1, [r3, #16]
 8000714:	4e11      	ldr	r6, [pc, #68]	; (800075c <HAL_ADC_Init+0x1ac>)
 8000716:	0089      	lsls	r1, r1, #2
 8000718:	0889      	lsrs	r1, r1, #2
 800071a:	6119      	str	r1, [r3, #16]
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	4031      	ands	r1, r6
 8000720:	6011      	str	r1, [r2, #0]
 8000722:	6811      	ldr	r1, [r2, #0]
 8000724:	430d      	orrs	r5, r1
 8000726:	6015      	str	r5, [r2, #0]
 8000728:	e783      	b.n	8000632 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800072a:	2120      	movs	r1, #32
 800072c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800072e:	4301      	orrs	r1, r0
 8000730:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000732:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000734:	430a      	orrs	r2, r1
 8000736:	65a2      	str	r2, [r4, #88]	; 0x58
 8000738:	e7c7      	b.n	80006ca <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800073a:	2101      	movs	r1, #1
 800073c:	420a      	tst	r2, r1
 800073e:	d0d6      	beq.n	80006ee <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000740:	691a      	ldr	r2, [r3, #16]
 8000742:	438a      	bics	r2, r1
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	e7d2      	b.n	80006ee <HAL_ADC_Init+0x13e>
 8000748:	fffffefd 	.word	0xfffffefd
 800074c:	40012708 	.word	0x40012708
 8000750:	fdffffff 	.word	0xfdffffff
 8000754:	fffe0219 	.word	0xfffe0219
 8000758:	fffffc03 	.word	0xfffffc03
 800075c:	ffc3ffff 	.word	0xffc3ffff

08000760 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000760:	6803      	ldr	r3, [r0, #0]
{
 8000762:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000764:	689b      	ldr	r3, [r3, #8]
{
 8000766:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000768:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800076a:	075b      	lsls	r3, r3, #29
 800076c:	d41a      	bmi.n	80007a4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800076e:	0025      	movs	r5, r4
 8000770:	3550      	adds	r5, #80	; 0x50
 8000772:	782b      	ldrb	r3, [r5, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d015      	beq.n	80007a4 <HAL_ADC_Start+0x44>
 8000778:	2301      	movs	r3, #1
 800077a:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800077c:	69e3      	ldr	r3, [r4, #28]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d111      	bne.n	80007a6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000782:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000786:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000788:	401a      	ands	r2, r3
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000790:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8000792:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000794:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8000796:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8000798:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800079a:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800079c:	6899      	ldr	r1, [r3, #8]
 800079e:	3a18      	subs	r2, #24
 80007a0:	430a      	orrs	r2, r1
 80007a2:	609a      	str	r2, [r3, #8]
}
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80007a6:	0020      	movs	r0, r4
 80007a8:	f7ff feca 	bl	8000540 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADC_Start+0x44>
 80007b0:	e7e7      	b.n	8000782 <HAL_ADC_Start+0x22>
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	fffff0fe 	.word	0xfffff0fe

080007b8 <HAL_ADC_PollForConversion>:
{
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007ba:	6945      	ldr	r5, [r0, #20]
{
 80007bc:	0004      	movs	r4, r0
 80007be:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007c0:	2d08      	cmp	r5, #8
 80007c2:	d00d      	beq.n	80007e0 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80007c4:	6803      	ldr	r3, [r0, #0]
 80007c6:	2001      	movs	r0, #1
 80007c8:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80007ca:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80007cc:	4203      	tst	r3, r0
 80007ce:	d007      	beq.n	80007e0 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007d0:	2320      	movs	r3, #32
 80007d2:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 80007d4:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007d6:	4313      	orrs	r3, r2
 80007d8:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 80007da:	2300      	movs	r3, #0
 80007dc:	7023      	strb	r3, [r4, #0]
}
 80007de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80007e0:	f7ff fe80 	bl	80004e4 <HAL_GetTick>
 80007e4:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	422a      	tst	r2, r5
 80007ec:	d024      	beq.n	8000838 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80007f2:	0092      	lsls	r2, r2, #2
 80007f4:	430a      	orrs	r2, r1
 80007f6:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80007f8:	22c0      	movs	r2, #192	; 0xc0
 80007fa:	68d9      	ldr	r1, [r3, #12]
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	4211      	tst	r1, r2
 8000800:	d113      	bne.n	800082a <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000802:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000804:	7fd2      	ldrb	r2, [r2, #31]
 8000806:	2a00      	cmp	r2, #0
 8000808:	d10f      	bne.n	800082a <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	0712      	lsls	r2, r2, #28
 800080e:	d50c      	bpl.n	800082a <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000810:	689a      	ldr	r2, [r3, #8]
 8000812:	0752      	lsls	r2, r2, #29
 8000814:	d423      	bmi.n	800085e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000816:	210c      	movs	r1, #12
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	438a      	bics	r2, r1
 800081c:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 800081e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000820:	4913      	ldr	r1, [pc, #76]	; (8000870 <HAL_ADC_PollForConversion+0xb8>)
 8000822:	4011      	ands	r1, r2
 8000824:	2201      	movs	r2, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 800082a:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800082c:	69a2      	ldr	r2, [r4, #24]
 800082e:	4282      	cmp	r2, r0
 8000830:	d1d5      	bne.n	80007de <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e7d2      	b.n	80007de <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8000838:	1c72      	adds	r2, r6, #1
 800083a:	d0d5      	beq.n	80007e8 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800083c:	2e00      	cmp	r6, #0
 800083e:	d108      	bne.n	8000852 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000840:	2304      	movs	r3, #4
 8000842:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8000844:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000846:	4313      	orrs	r3, r2
 8000848:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800084a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800084c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800084e:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8000850:	e7c5      	b.n	80007de <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000852:	f7ff fe47 	bl	80004e4 <HAL_GetTick>
 8000856:	1bc0      	subs	r0, r0, r7
 8000858:	4286      	cmp	r6, r0
 800085a:	d2c4      	bcs.n	80007e6 <HAL_ADC_PollForConversion+0x2e>
 800085c:	e7f0      	b.n	8000840 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800085e:	2220      	movs	r2, #32
 8000860:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000862:	430a      	orrs	r2, r1
 8000864:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000866:	2201      	movs	r2, #1
 8000868:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800086a:	430a      	orrs	r2, r1
 800086c:	65a2      	str	r2, [r4, #88]	; 0x58
 800086e:	e7dc      	b.n	800082a <HAL_ADC_PollForConversion+0x72>
 8000870:	fffffefe 	.word	0xfffffefe

08000874 <HAL_ADC_Start_DMA>:
{
 8000874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000876:	6803      	ldr	r3, [r0, #0]
{
 8000878:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800087a:	689b      	ldr	r3, [r3, #8]
{
 800087c:	000f      	movs	r7, r1
 800087e:	9201      	str	r2, [sp, #4]
    tmp_hal_status = HAL_BUSY;
 8000880:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000882:	075b      	lsls	r3, r3, #29
 8000884:	d430      	bmi.n	80008e8 <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 8000886:	0026      	movs	r6, r4
 8000888:	3650      	adds	r6, #80	; 0x50
 800088a:	7833      	ldrb	r3, [r6, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d02b      	beq.n	80008e8 <HAL_ADC_Start_DMA+0x74>
 8000890:	2301      	movs	r3, #1
 8000892:	7033      	strb	r3, [r6, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000894:	69e3      	ldr	r3, [r4, #28]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d127      	bne.n	80008ea <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 800089a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 800089e:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80008a0:	401a      	ands	r2, r3
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6563      	str	r3, [r4, #84]	; 0x54
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80008aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <HAL_ADC_Start_DMA+0x88>)
      ADC_CLEAR_ERRORCODE(hadc);
 80008ae:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80008b0:	7035      	strb	r5, [r6, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80008b2:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_ADC_Start_DMA+0x8c>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80008b6:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80008b8:	6303      	str	r3, [r0, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_ADC_Start_DMA+0x90>)
 80008bc:	6343      	str	r3, [r0, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80008be:	231c      	movs	r3, #28
 80008c0:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80008c2:	684a      	ldr	r2, [r1, #4]
 80008c4:	3b0c      	subs	r3, #12
 80008c6:	4313      	orrs	r3, r2
 80008c8:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80008ca:	2301      	movs	r3, #1
 80008cc:	68ca      	ldr	r2, [r1, #12]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80008d2:	003a      	movs	r2, r7
 80008d4:	3140      	adds	r1, #64	; 0x40
 80008d6:	9b01      	ldr	r3, [sp, #4]
 80008d8:	f000 f964 	bl	8000ba4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80008dc:	2304      	movs	r3, #4
 80008de:	0028      	movs	r0, r5
 80008e0:	6822      	ldr	r2, [r4, #0]
 80008e2:	6891      	ldr	r1, [r2, #8]
 80008e4:	430b      	orrs	r3, r1
 80008e6:	6093      	str	r3, [r2, #8]
}
 80008e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80008ea:	0020      	movs	r0, r4
 80008ec:	f7ff fe28 	bl	8000540 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d1f9      	bne.n	80008e8 <HAL_ADC_Start_DMA+0x74>
 80008f4:	e7d1      	b.n	800089a <HAL_ADC_Start_DMA+0x26>
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	fffff0fe 	.word	0xfffff0fe
 80008fc:	08000911 	.word	0x08000911
 8000900:	08000981 	.word	0x08000981
 8000904:	0800098d 	.word	0x0800098d

08000908 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000908:	6803      	ldr	r3, [r0, #0]
 800090a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800090c:	4770      	bx	lr
	...

08000910 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000910:	2250      	movs	r2, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000912:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8000914:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000916:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8000918:	4211      	tst	r1, r2
 800091a:	d12b      	bne.n	8000974 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800091c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800091e:	32b1      	adds	r2, #177	; 0xb1
 8000920:	32ff      	adds	r2, #255	; 0xff
 8000922:	430a      	orrs	r2, r1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000924:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000926:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	0109      	lsls	r1, r1, #4
 800092c:	68d0      	ldr	r0, [r2, #12]
 800092e:	4208      	tst	r0, r1
 8000930:	d113      	bne.n	800095a <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000932:	1c59      	adds	r1, r3, #1
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000934:	7fc9      	ldrb	r1, [r1, #31]
 8000936:	2900      	cmp	r1, #0
 8000938:	d10f      	bne.n	800095a <ADC_DMAConvCplt+0x4a>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800093a:	6811      	ldr	r1, [r2, #0]
 800093c:	0709      	lsls	r1, r1, #28
 800093e:	d50c      	bpl.n	800095a <ADC_DMAConvCplt+0x4a>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000940:	6891      	ldr	r1, [r2, #8]
 8000942:	0749      	lsls	r1, r1, #29
 8000944:	d40d      	bmi.n	8000962 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000946:	200c      	movs	r0, #12
 8000948:	6851      	ldr	r1, [r2, #4]
 800094a:	4381      	bics	r1, r0
 800094c:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800094e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000950:	490a      	ldr	r1, [pc, #40]	; (800097c <ADC_DMAConvCplt+0x6c>)
 8000952:	4011      	ands	r1, r2
 8000954:	2201      	movs	r2, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fb48 	bl	8001ff0 <HAL_ADC_ConvCpltCallback>
}
 8000960:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000962:	2220      	movs	r2, #32
 8000964:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8000966:	430a      	orrs	r2, r1
 8000968:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800096a:	2201      	movs	r2, #1
 800096c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800096e:	430a      	orrs	r2, r1
 8000970:	659a      	str	r2, [r3, #88]	; 0x58
 8000972:	e7f2      	b.n	800095a <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000978:	4798      	blx	r3
}
 800097a:	e7f1      	b.n	8000960 <ADC_DMAConvCplt+0x50>
 800097c:	fffffefe 	.word	0xfffffefe

08000980 <ADC_DMAHalfConvCplt>:
{
 8000980:	b510      	push	{r4, lr}
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000982:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000984:	f001 fb2a 	bl	8001fdc <HAL_ADC_ConvHalfCpltCallback>
}
 8000988:	bd10      	pop	{r4, pc}

0800098a <HAL_ADC_ErrorCallback>:
}
 800098a:	4770      	bx	lr

0800098c <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800098c:	2340      	movs	r3, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800098e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8000990:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000992:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8000994:	4313      	orrs	r3, r2
 8000996:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000998:	2304      	movs	r3, #4
 800099a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800099c:	4313      	orrs	r3, r2
 800099e:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 80009a0:	f7ff fff3 	bl	800098a <HAL_ADC_ErrorCallback>
}
 80009a4:	bd10      	pop	{r4, pc}
	...

080009a8 <HAL_ADC_ConfigChannel>:
{
 80009a8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80009aa:	0004      	movs	r4, r0
 80009ac:	3450      	adds	r4, #80	; 0x50
 80009ae:	7823      	ldrb	r3, [r4, #0]
{
 80009b0:	0006      	movs	r6, r0
 80009b2:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80009b4:	2002      	movs	r0, #2
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d00b      	beq.n	80009d2 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80009ba:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 80009bc:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80009be:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 80009c0:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80009c2:	074b      	lsls	r3, r1, #29
 80009c4:	d506      	bpl.n	80009d4 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009c6:	2220      	movs	r2, #32
 80009c8:	6d71      	ldr	r1, [r6, #84]	; 0x54
 80009ca:	430a      	orrs	r2, r1
 80009cc:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80009ce:	2200      	movs	r2, #0
 80009d0:	7022      	strb	r2, [r4, #0]
}
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 80009d6:	4922      	ldr	r1, [pc, #136]	; (8000a60 <HAL_ADC_ConfigChannel+0xb8>)
 80009d8:	686e      	ldr	r6, [r5, #4]
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	02c0      	lsls	r0, r0, #11
 80009de:	428e      	cmp	r6, r1
 80009e0:	d023      	beq.n	8000a2a <HAL_ADC_ConfigChannel+0x82>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80009e2:	6a96      	ldr	r6, [r2, #40]	; 0x28
 80009e4:	0359      	lsls	r1, r3, #13
 80009e6:	0b49      	lsrs	r1, r1, #13
 80009e8:	4331      	orrs	r1, r6
 80009ea:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80009ec:	4203      	tst	r3, r0
 80009ee:	d008      	beq.n	8000a02 <HAL_ADC_ConfigChannel+0x5a>
      ADC->CCR |= ADC_CCR_TSEN;   
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <HAL_ADC_ConfigChannel+0xbc>)
 80009f4:	041b      	lsls	r3, r3, #16
 80009f6:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80009f8:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80009fe:	f7ff fd89 	bl	8000514 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000a02:	682a      	ldr	r2, [r5, #0]
 8000a04:	0393      	lsls	r3, r2, #14
 8000a06:	d505      	bpl.n	8000a14 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	4916      	ldr	r1, [pc, #88]	; (8000a64 <HAL_ADC_ConfigChannel+0xbc>)
 8000a0c:	03db      	lsls	r3, r3, #15
 8000a0e:	6808      	ldr	r0, [r1, #0]
 8000a10:	4303      	orrs	r3, r0
 8000a12:	600b      	str	r3, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000a14:	03d3      	lsls	r3, r2, #15
 8000a16:	d505      	bpl.n	8000a24 <HAL_ADC_ConfigChannel+0x7c>
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <HAL_ADC_ConfigChannel+0xbc>)
 8000a1c:	045b      	lsls	r3, r3, #17
 8000a1e:	6811      	ldr	r1, [r2, #0]
 8000a20:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8000a22:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8000a24:	2000      	movs	r0, #0
 8000a26:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8000a28:	e7d3      	b.n	80009d2 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000a2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000a2c:	035d      	lsls	r5, r3, #13
 8000a2e:	0b6d      	lsrs	r5, r5, #13
 8000a30:	43a9      	bics	r1, r5
 8000a32:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000a34:	4203      	tst	r3, r0
 8000a36:	d004      	beq.n	8000a42 <HAL_ADC_ConfigChannel+0x9a>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000a38:	490a      	ldr	r1, [pc, #40]	; (8000a64 <HAL_ADC_ConfigChannel+0xbc>)
 8000a3a:	480b      	ldr	r0, [pc, #44]	; (8000a68 <HAL_ADC_ConfigChannel+0xc0>)
 8000a3c:	680a      	ldr	r2, [r1, #0]
 8000a3e:	4002      	ands	r2, r0
 8000a40:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000a42:	039a      	lsls	r2, r3, #14
 8000a44:	d504      	bpl.n	8000a50 <HAL_ADC_ConfigChannel+0xa8>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000a46:	4907      	ldr	r1, [pc, #28]	; (8000a64 <HAL_ADC_ConfigChannel+0xbc>)
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_ADC_ConfigChannel+0xc4>)
 8000a4a:	680a      	ldr	r2, [r1, #0]
 8000a4c:	4002      	ands	r2, r0
 8000a4e:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000a50:	03db      	lsls	r3, r3, #15
 8000a52:	d5e7      	bpl.n	8000a24 <HAL_ADC_ConfigChannel+0x7c>
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8000a54:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <HAL_ADC_ConfigChannel+0xbc>)
 8000a56:	4906      	ldr	r1, [pc, #24]	; (8000a70 <HAL_ADC_ConfigChannel+0xc8>)
 8000a58:	6813      	ldr	r3, [r2, #0]
 8000a5a:	400b      	ands	r3, r1
 8000a5c:	e7e1      	b.n	8000a22 <HAL_ADC_ConfigChannel+0x7a>
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	00001001 	.word	0x00001001
 8000a64:	40012708 	.word	0x40012708
 8000a68:	ff7fffff 	.word	0xff7fffff
 8000a6c:	ffbfffff 	.word	0xffbfffff
 8000a70:	feffffff 	.word	0xfeffffff

08000a74 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	da14      	bge.n	8000aa6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	b2c0      	uxtb	r0, r0
 8000a80:	4003      	ands	r3, r0
 8000a82:	3b08      	subs	r3, #8
 8000a84:	4a11      	ldr	r2, [pc, #68]	; (8000acc <HAL_NVIC_SetPriority+0x58>)
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	189b      	adds	r3, r3, r2
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4010      	ands	r0, r2
 8000a90:	4090      	lsls	r0, r2
 8000a92:	32fc      	adds	r2, #252	; 0xfc
 8000a94:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a98:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9c:	69dc      	ldr	r4, [r3, #28]
 8000a9e:	43ac      	bics	r4, r5
 8000aa0:	4321      	orrs	r1, r4
 8000aa2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa6:	2503      	movs	r5, #3
 8000aa8:	0883      	lsrs	r3, r0, #2
 8000aaa:	4028      	ands	r0, r5
 8000aac:	40a8      	lsls	r0, r5
 8000aae:	35fc      	adds	r5, #252	; 0xfc
 8000ab0:	002e      	movs	r6, r5
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_NVIC_SetPriority+0x5c>)
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	189b      	adds	r3, r3, r2
 8000ab8:	22c0      	movs	r2, #192	; 0xc0
 8000aba:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abc:	4029      	ands	r1, r5
 8000abe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	0092      	lsls	r2, r2, #2
 8000ac2:	589c      	ldr	r4, [r3, r2]
 8000ac4:	43b4      	bics	r4, r6
 8000ac6:	4321      	orrs	r1, r4
 8000ac8:	5099      	str	r1, [r3, r2]
 8000aca:	e7eb      	b.n	8000aa4 <HAL_NVIC_SetPriority+0x30>
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ad4:	231f      	movs	r3, #31
 8000ad6:	4018      	ands	r0, r3
 8000ad8:	3b1e      	subs	r3, #30
 8000ada:	4083      	lsls	r3, r0
 8000adc:	4a01      	ldr	r2, [pc, #4]	; (8000ae4 <HAL_NVIC_EnableIRQ+0x10>)
 8000ade:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ae0:	4770      	bx	lr
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <HAL_SYSTICK_Config+0x28>)
 8000aea:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aec:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d80d      	bhi.n	8000b0e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af2:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afa:	6a03      	ldr	r3, [r0, #32]
 8000afc:	0609      	lsls	r1, r1, #24
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b06:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b08:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b0e:	4770      	bx	lr
 8000b10:	00ffffff 	.word	0x00ffffff
 8000b14:	e000e010 	.word	0xe000e010
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1e:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000b20:	2001      	movs	r0, #1
  if(hdma == NULL)
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d035      	beq.n	8000b92 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b26:	6825      	ldr	r5, [r4, #0]
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <HAL_DMA_Init+0x78>)
 8000b2a:	2114      	movs	r1, #20
 8000b2c:	18e8      	adds	r0, r5, r3
 8000b2e:	f7ff faff 	bl	8000130 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b34:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8000b36:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b3c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b3e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b40:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b44:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b46:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8000b48:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b4a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8000b4c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b4e:	433b      	orrs	r3, r7
 8000b50:	6967      	ldr	r7, [r4, #20]
 8000b52:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b54:	69a7      	ldr	r7, [r4, #24]
 8000b56:	433b      	orrs	r3, r7
 8000b58:	69e7      	ldr	r7, [r4, #28]
 8000b5a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b5c:	6a27      	ldr	r7, [r4, #32]
 8000b5e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8000b60:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b62:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	01db      	lsls	r3, r3, #7
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d00c      	beq.n	8000b86 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b6c:	251c      	movs	r5, #28
 8000b6e:	4028      	ands	r0, r5
 8000b70:	3d0d      	subs	r5, #13
 8000b72:	4085      	lsls	r5, r0
 8000b74:	490a      	ldr	r1, [pc, #40]	; (8000ba0 <HAL_DMA_Init+0x84>)
 8000b76:	680b      	ldr	r3, [r1, #0]
 8000b78:	43ab      	bics	r3, r5
 8000b7a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b7c:	6863      	ldr	r3, [r4, #4]
 8000b7e:	680d      	ldr	r5, [r1, #0]
 8000b80:	4083      	lsls	r3, r0
 8000b82:	432b      	orrs	r3, r5
 8000b84:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b86:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000b88:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b8a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b8c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8000b8e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000b90:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8000b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b94:	bffdfff8 	.word	0xbffdfff8
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	ffff800f 	.word	0xffff800f
 8000ba0:	400200a8 	.word	0x400200a8

08000ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ba6:	1d46      	adds	r6, r0, #5
 8000ba8:	7ff5      	ldrb	r5, [r6, #31]
 8000baa:	2402      	movs	r4, #2
 8000bac:	2d01      	cmp	r5, #1
 8000bae:	d02a      	beq.n	8000c06 <HAL_DMA_Start_IT+0x62>
 8000bb0:	2501      	movs	r5, #1
 8000bb2:	77f5      	strb	r5, [r6, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000bb4:	1d85      	adds	r5, r0, #6
 8000bb6:	46ac      	mov	ip, r5
 8000bb8:	7fed      	ldrb	r5, [r5, #31]
 8000bba:	2700      	movs	r7, #0
 8000bbc:	b2ed      	uxtb	r5, r5
 8000bbe:	2d01      	cmp	r5, #1
 8000bc0:	d12d      	bne.n	8000c1e <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bc2:	4666      	mov	r6, ip
 8000bc4:	77f4      	strb	r4, [r6, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bc6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc8:	63c7      	str	r7, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000bca:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bcc:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8000bce:	43ae      	bics	r6, r5
 8000bd0:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bd2:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000bd4:	9601      	str	r6, [sp, #4]
 8000bd6:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8000bd8:	4037      	ands	r7, r6
 8000bda:	40bd      	lsls	r5, r7
 8000bdc:	9e01      	ldr	r6, [sp, #4]
 8000bde:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000be0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000be2:	6883      	ldr	r3, [r0, #8]
 8000be4:	6805      	ldr	r5, [r0, #0]
 8000be6:	2b10      	cmp	r3, #16
 8000be8:	d10f      	bne.n	8000c0a <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bea:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000bec:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000bee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00d      	beq.n	8000c10 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf4:	230e      	movs	r3, #14
 8000bf6:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000bfc:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8000bfe:	2400      	movs	r4, #0
    __HAL_DMA_ENABLE(hdma);
 8000c00:	682a      	ldr	r2, [r5, #0]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	602b      	str	r3, [r5, #0]
}
 8000c06:	0020      	movs	r0, r4
 8000c08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000c0a:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000c0c:	60e2      	str	r2, [r4, #12]
 8000c0e:	e7ee      	b.n	8000bee <HAL_DMA_Start_IT+0x4a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c10:	2204      	movs	r2, #4
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	4393      	bics	r3, r2
 8000c16:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c18:	6822      	ldr	r2, [r4, #0]
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	e7ec      	b.n	8000bf8 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma);
 8000c1e:	77f7      	strb	r7, [r6, #31]
 8000c20:	e7f1      	b.n	8000c06 <HAL_DMA_Start_IT+0x62>

08000c22 <HAL_DMA_IRQHandler>:
{
 8000c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000c24:	221c      	movs	r2, #28
 8000c26:	2704      	movs	r7, #4
 8000c28:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c2a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000c2c:	4032      	ands	r2, r6
 8000c2e:	003e      	movs	r6, r7
 8000c30:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c32:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000c34:	6803      	ldr	r3, [r0, #0]
 8000c36:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000c38:	422e      	tst	r6, r5
 8000c3a:	d00d      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x36>
 8000c3c:	423c      	tst	r4, r7
 8000c3e:	d00b      	beq.n	8000c58 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	0692      	lsls	r2, r2, #26
 8000c44:	d402      	bmi.n	8000c4c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	43ba      	bics	r2, r7
 8000c4a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8000c4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000c4e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d019      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8000c54:	4798      	blx	r3
  return;
 8000c56:	e017      	b.n	8000c88 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000c58:	2702      	movs	r7, #2
 8000c5a:	003e      	movs	r6, r7
 8000c5c:	4096      	lsls	r6, r2
 8000c5e:	422e      	tst	r6, r5
 8000c60:	d013      	beq.n	8000c8a <HAL_DMA_IRQHandler+0x68>
 8000c62:	423c      	tst	r4, r7
 8000c64:	d011      	beq.n	8000c8a <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	0692      	lsls	r2, r2, #26
 8000c6a:	d406      	bmi.n	8000c7a <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c6c:	240a      	movs	r4, #10
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	43a2      	bics	r2, r4
 8000c72:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000c74:	2201      	movs	r2, #1
 8000c76:	1d83      	adds	r3, r0, #6
 8000c78:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c7e:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000c80:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8000c82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d1e5      	bne.n	8000c54 <HAL_DMA_IRQHandler+0x32>
}
 8000c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000c8a:	2608      	movs	r6, #8
 8000c8c:	0037      	movs	r7, r6
 8000c8e:	4097      	lsls	r7, r2
 8000c90:	423d      	tst	r5, r7
 8000c92:	d0f9      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x66>
 8000c94:	4234      	tst	r4, r6
 8000c96:	d0f7      	beq.n	8000c88 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c98:	250e      	movs	r5, #14
 8000c9a:	681c      	ldr	r4, [r3, #0]
 8000c9c:	43ac      	bics	r4, r5
 8000c9e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	001c      	movs	r4, r3
 8000ca4:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8000ca6:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ca8:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000caa:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000cac:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	1d43      	adds	r3, r0, #5
 8000cb2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8000cb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000cb6:	e7e5      	b.n	8000c84 <HAL_DMA_IRQHandler+0x62>

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cba:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <HAL_GPIO_Init+0x164>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cbc:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cbe:	1882      	adds	r2, r0, r2
 8000cc0:	1e54      	subs	r4, r2, #1
 8000cc2:	41a2      	sbcs	r2, r4
{
 8000cc4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cc6:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 8000cc8:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cca:	3205      	adds	r2, #5
{
 8000ccc:	9103      	str	r1, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000cce:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cd0:	9a04      	ldr	r2, [sp, #16]
 8000cd2:	40da      	lsrs	r2, r3
 8000cd4:	d101      	bne.n	8000cda <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000cd6:	b007      	add	sp, #28
 8000cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0037      	movs	r7, r6
 8000cde:	409f      	lsls	r7, r3
 8000ce0:	9a04      	ldr	r2, [sp, #16]
 8000ce2:	403a      	ands	r2, r7
 8000ce4:	9202      	str	r2, [sp, #8]
    if (iocurrent)
 8000ce6:	d100      	bne.n	8000cea <HAL_GPIO_Init+0x32>
 8000ce8:	e095      	b.n	8000e16 <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cea:	9a03      	ldr	r2, [sp, #12]
 8000cec:	6852      	ldr	r2, [r2, #4]
 8000cee:	9201      	str	r2, [sp, #4]
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	9d01      	ldr	r5, [sp, #4]
 8000cf4:	4395      	bics	r5, r2
 8000cf6:	1e6a      	subs	r2, r5, #1
 8000cf8:	42b2      	cmp	r2, r6
 8000cfa:	d813      	bhi.n	8000d24 <HAL_GPIO_Init+0x6c>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000cfc:	2403      	movs	r4, #3
 8000cfe:	0059      	lsls	r1, r3, #1
 8000d00:	408c      	lsls	r4, r1
 8000d02:	468c      	mov	ip, r1
        temp = GPIOx->OSPEEDR;
 8000d04:	6882      	ldr	r2, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	9903      	ldr	r1, [sp, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d08:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d0a:	68cc      	ldr	r4, [r1, #12]
 8000d0c:	4661      	mov	r1, ip
 8000d0e:	408c      	lsls	r4, r1
 8000d10:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000d12:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d14:	9a01      	ldr	r2, [sp, #4]
        temp = GPIOx->OTYPER;
 8000d16:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d18:	0912      	lsrs	r2, r2, #4
 8000d1a:	4032      	ands	r2, r6
 8000d1c:	409a      	lsls	r2, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1e:	43bc      	bics	r4, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d20:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000d22:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d24:	2203      	movs	r2, #3
 8000d26:	005f      	lsls	r7, r3, #1
 8000d28:	40ba      	lsls	r2, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2a:	9903      	ldr	r1, [sp, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d2c:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2e:	688c      	ldr	r4, [r1, #8]
      temp = GPIOx->PUPDR;
 8000d30:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d32:	40bc      	lsls	r4, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d34:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d36:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000d38:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3a:	2d02      	cmp	r5, #2
 8000d3c:	d10e      	bne.n	8000d5c <HAL_GPIO_Init+0xa4>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000d3e:	210f      	movs	r1, #15
 8000d40:	3505      	adds	r5, #5
 8000d42:	401d      	ands	r5, r3
 8000d44:	00ad      	lsls	r5, r5, #2
 8000d46:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8000d48:	08dc      	lsrs	r4, r3, #3
 8000d4a:	00a4      	lsls	r4, r4, #2
 8000d4c:	1904      	adds	r4, r0, r4
 8000d4e:	6a26      	ldr	r6, [r4, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000d50:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d52:	9903      	ldr	r1, [sp, #12]
 8000d54:	6909      	ldr	r1, [r1, #16]
 8000d56:	40a9      	lsls	r1, r5
 8000d58:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000d5a:	6226      	str	r6, [r4, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5c:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 8000d5e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d60:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d62:	9c01      	ldr	r4, [sp, #4]
 8000d64:	4034      	ands	r4, r6
 8000d66:	40bc      	lsls	r4, r7
 8000d68:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000d6a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6c:	9a01      	ldr	r2, [sp, #4]
 8000d6e:	00d2      	lsls	r2, r2, #3
 8000d70:	d551      	bpl.n	8000e16 <HAL_GPIO_Init+0x15e>
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d72:	001d      	movs	r5, r3
 8000d74:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2101      	movs	r1, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d78:	4035      	ands	r5, r6
 8000d7a:	00ad      	lsls	r5, r5, #2
 8000d7c:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4c28      	ldr	r4, [pc, #160]	; (8000e20 <HAL_GPIO_Init+0x168>)
 8000d80:	468c      	mov	ip, r1
 8000d82:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d84:	430a      	orrs	r2, r1
 8000d86:	6362      	str	r2, [r4, #52]	; 0x34
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <HAL_GPIO_Init+0x16c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000d8a:	089c      	lsrs	r4, r3, #2
 8000d8c:	00a4      	lsls	r4, r4, #2
 8000d8e:	18a4      	adds	r4, r4, r2
 8000d90:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d92:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d94:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d96:	0011      	movs	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d98:	05ff      	lsls	r7, r7, #23
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	42b8      	cmp	r0, r7
 8000d9e:	d010      	beq.n	8000dc2 <HAL_GPIO_Init+0x10a>
 8000da0:	4f21      	ldr	r7, [pc, #132]	; (8000e28 <HAL_GPIO_Init+0x170>)
 8000da2:	4662      	mov	r2, ip
 8000da4:	42b8      	cmp	r0, r7
 8000da6:	d00c      	beq.n	8000dc2 <HAL_GPIO_Init+0x10a>
 8000da8:	4f20      	ldr	r7, [pc, #128]	; (8000e2c <HAL_GPIO_Init+0x174>)
 8000daa:	1892      	adds	r2, r2, r2
 8000dac:	42b8      	cmp	r0, r7
 8000dae:	d008      	beq.n	8000dc2 <HAL_GPIO_Init+0x10a>
 8000db0:	4f1f      	ldr	r7, [pc, #124]	; (8000e30 <HAL_GPIO_Init+0x178>)
 8000db2:	0032      	movs	r2, r6
 8000db4:	42b8      	cmp	r0, r7
 8000db6:	d004      	beq.n	8000dc2 <HAL_GPIO_Init+0x10a>
 8000db8:	4e1e      	ldr	r6, [pc, #120]	; (8000e34 <HAL_GPIO_Init+0x17c>)
 8000dba:	4462      	add	r2, ip
 8000dbc:	42b0      	cmp	r0, r6
 8000dbe:	d000      	beq.n	8000dc2 <HAL_GPIO_Init+0x10a>
 8000dc0:	9a05      	ldr	r2, [sp, #20]
 8000dc2:	40aa      	lsls	r2, r5
 8000dc4:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc8:	60a2      	str	r2, [r4, #8]
          temp |= iocurrent;
 8000dca:	000d      	movs	r5, r1
        temp = EXTI->IMR;
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_GPIO_Init+0x180>)
        temp &= ~((uint32_t)iocurrent);
 8000dce:	43cc      	mvns	r4, r1
        temp = EXTI->IMR;
 8000dd0:	6816      	ldr	r6, [r2, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd2:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8000dd4:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd6:	03c9      	lsls	r1, r1, #15
 8000dd8:	d401      	bmi.n	8000dde <HAL_GPIO_Init+0x126>
        temp &= ~((uint32_t)iocurrent);
 8000dda:	0035      	movs	r5, r6
 8000ddc:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000dde:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000de0:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000de2:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de4:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8000de6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de8:	0389      	lsls	r1, r1, #14
 8000dea:	d401      	bmi.n	8000df0 <HAL_GPIO_Init+0x138>
        temp &= ~((uint32_t)iocurrent);
 8000dec:	0035      	movs	r5, r6
 8000dee:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000df0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000df2:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000df4:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df6:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8000df8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfa:	02c9      	lsls	r1, r1, #11
 8000dfc:	d401      	bmi.n	8000e02 <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	0035      	movs	r5, r6
 8000e00:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000e02:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000e04:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000e06:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e08:	9901      	ldr	r1, [sp, #4]
          temp |= iocurrent;
 8000e0a:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e0c:	0289      	lsls	r1, r1, #10
 8000e0e:	d401      	bmi.n	8000e14 <HAL_GPIO_Init+0x15c>
        temp &= ~((uint32_t)iocurrent);
 8000e10:	4025      	ands	r5, r4
 8000e12:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000e14:	60d6      	str	r6, [r2, #12]
    position++;
 8000e16:	3301      	adds	r3, #1
 8000e18:	e75a      	b.n	8000cd0 <HAL_GPIO_Init+0x18>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	afffe400 	.word	0xafffe400
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	50000400 	.word	0x50000400
 8000e2c:	50000800 	.word	0x50000800
 8000e30:	50000c00 	.word	0x50000c00
 8000e34:	50001000 	.word	0x50001000
 8000e38:	40010400 	.word	0x40010400

08000e3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e3c:	6900      	ldr	r0, [r0, #16]
 8000e3e:	4008      	ands	r0, r1
 8000e40:	1e41      	subs	r1, r0, #1
 8000e42:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000e44:	b2c0      	uxtb	r0, r0
}
 8000e46:	4770      	bx	lr

08000e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e4c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e4e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000e50:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000e52:	e7fc      	b.n	8000e4e <HAL_GPIO_WritePin+0x6>

08000e54 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e54:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000e58:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000e5a:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	2a08      	cmp	r2, #8
 8000e60:	d026      	beq.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x5c>
 8000e62:	2a0c      	cmp	r2, #12
 8000e64:	d006      	beq.n	8000e74 <HAL_RCC_GetSysClockFreq+0x20>
 8000e66:	2a04      	cmp	r2, #4
 8000e68:	d11a      	bne.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	06db      	lsls	r3, r3, #27
 8000e6e:	d421      	bmi.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000e70:	4812      	ldr	r0, [pc, #72]	; (8000ebc <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000e72:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000e74:	028a      	lsls	r2, r1, #10
 8000e76:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000e78:	0f12      	lsrs	r2, r2, #28
 8000e7a:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000e7c:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e7e:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000e80:	0f89      	lsrs	r1, r1, #30
 8000e82:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e84:	03c0      	lsls	r0, r0, #15
 8000e86:	d504      	bpl.n	8000e92 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000e88:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000e8a:	4350      	muls	r0, r2
 8000e8c:	f7ff f950 	bl	8000130 <__udivsi3>
 8000e90:	e7ef      	b.n	8000e72 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	06db      	lsls	r3, r3, #27
 8000e96:	d501      	bpl.n	8000e9c <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e9a:	e7f6      	b.n	8000e8a <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000e9c:	4807      	ldr	r0, [pc, #28]	; (8000ebc <HAL_RCC_GetSysClockFreq+0x68>)
 8000e9e:	e7f4      	b.n	8000e8a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000ea0:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000ea2:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000ea4:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000ea6:	041b      	lsls	r3, r3, #16
 8000ea8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4098      	lsls	r0, r3
 8000eae:	e7e0      	b.n	8000e72 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <HAL_RCC_GetSysClockFreq+0x70>)
 8000eb2:	e7de      	b.n	8000e72 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000eb6:	e7dc      	b.n	8000e72 <HAL_RCC_GetSysClockFreq+0x1e>
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	00f42400 	.word	0x00f42400
 8000ec0:	08002285 	.word	0x08002285
 8000ec4:	007a1200 	.word	0x007a1200
 8000ec8:	003d0900 	.word	0x003d0900

08000ecc <HAL_RCC_OscConfig>:
{
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	0005      	movs	r5, r0
 8000ed0:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
}
 8000ed8:	b007      	add	sp, #28
 8000eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000edc:	230c      	movs	r3, #12
 8000ede:	4cc2      	ldr	r4, [pc, #776]	; (80011e8 <HAL_RCC_OscConfig+0x31c>)
 8000ee0:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee2:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ee4:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	025b      	lsls	r3, r3, #9
 8000eea:	401a      	ands	r2, r3
 8000eec:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	6802      	ldr	r2, [r0, #0]
 8000ef0:	07d2      	lsls	r2, r2, #31
 8000ef2:	d441      	bmi.n	8000f78 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	079b      	lsls	r3, r3, #30
 8000ef8:	d500      	bpl.n	8000efc <HAL_RCC_OscConfig+0x30>
 8000efa:	e087      	b.n	800100c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000efc:	682b      	ldr	r3, [r5, #0]
 8000efe:	06db      	lsls	r3, r3, #27
 8000f00:	d528      	bpl.n	8000f54 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	d000      	beq.n	8000f08 <HAL_RCC_OscConfig+0x3c>
 8000f06:	e0e1      	b.n	80010cc <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	059b      	lsls	r3, r3, #22
 8000f0c:	d502      	bpl.n	8000f14 <HAL_RCC_OscConfig+0x48>
 8000f0e:	69eb      	ldr	r3, [r5, #28]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0e0      	beq.n	8000ed6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f14:	6862      	ldr	r2, [r4, #4]
 8000f16:	49b5      	ldr	r1, [pc, #724]	; (80011ec <HAL_RCC_OscConfig+0x320>)
 8000f18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f20:	6861      	ldr	r1, [r4, #4]
 8000f22:	6a2a      	ldr	r2, [r5, #32]
 8000f24:	0209      	lsls	r1, r1, #8
 8000f26:	0a09      	lsrs	r1, r1, #8
 8000f28:	0612      	lsls	r2, r2, #24
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	0b5b      	lsrs	r3, r3, #13
 8000f32:	3301      	adds	r3, #1
 8000f34:	0212      	lsls	r2, r2, #8
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f3a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000f3c:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f3e:	060a      	lsls	r2, r1, #24
 8000f40:	49ab      	ldr	r1, [pc, #684]	; (80011f0 <HAL_RCC_OscConfig+0x324>)
 8000f42:	0f12      	lsrs	r2, r2, #28
 8000f44:	5c8a      	ldrb	r2, [r1, r2]
 8000f46:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f48:	4aaa      	ldr	r2, [pc, #680]	; (80011f4 <HAL_RCC_OscConfig+0x328>)
 8000f4a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000f4c:	f7ff fa86 	bl	800045c <HAL_InitTick>
        if(status != HAL_OK)
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d1c1      	bne.n	8000ed8 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	071b      	lsls	r3, r3, #28
 8000f58:	d500      	bpl.n	8000f5c <HAL_RCC_OscConfig+0x90>
 8000f5a:	e0ee      	b.n	800113a <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	075b      	lsls	r3, r3, #29
 8000f60:	d500      	bpl.n	8000f64 <HAL_RCC_OscConfig+0x98>
 8000f62:	e110      	b.n	8001186 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	069b      	lsls	r3, r3, #26
 8000f68:	d500      	bpl.n	8000f6c <HAL_RCC_OscConfig+0xa0>
 8000f6a:	e195      	b.n	8001298 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d000      	beq.n	8000f74 <HAL_RCC_OscConfig+0xa8>
 8000f72:	e1c4      	b.n	80012fe <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8000f74:	2000      	movs	r0, #0
 8000f76:	e7af      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f78:	2e08      	cmp	r6, #8
 8000f7a:	d004      	beq.n	8000f86 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f7c:	2e0c      	cmp	r6, #12
 8000f7e:	d109      	bne.n	8000f94 <HAL_RCC_OscConfig+0xc8>
 8000f80:	9a01      	ldr	r2, [sp, #4]
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	039b      	lsls	r3, r3, #14
 8000f8a:	d5b3      	bpl.n	8000ef4 <HAL_RCC_OscConfig+0x28>
 8000f8c:	686b      	ldr	r3, [r5, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1b0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x28>
 8000f92:	e7a0      	b.n	8000ed6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f94:	686a      	ldr	r2, [r5, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d111      	bne.n	8000fbe <HAL_RCC_OscConfig+0xf2>
 8000f9a:	6822      	ldr	r2, [r4, #0]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fa0:	f7ff faa0 	bl	80004e4 <HAL_GetTick>
 8000fa4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	0292      	lsls	r2, r2, #10
 8000fac:	4213      	tst	r3, r2
 8000fae:	d1a1      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fa98 	bl	80004e4 <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	2864      	cmp	r0, #100	; 0x64
 8000fb8:	d9f5      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000fba:	2003      	movs	r0, #3
 8000fbc:	e78c      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbe:	21a0      	movs	r1, #160	; 0xa0
 8000fc0:	02c9      	lsls	r1, r1, #11
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d105      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x106>
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	6821      	ldr	r1, [r4, #0]
 8000fca:	02d2      	lsls	r2, r2, #11
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	6022      	str	r2, [r4, #0]
 8000fd0:	e7e3      	b.n	8000f9a <HAL_RCC_OscConfig+0xce>
 8000fd2:	6821      	ldr	r1, [r4, #0]
 8000fd4:	4888      	ldr	r0, [pc, #544]	; (80011f8 <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	4001      	ands	r1, r0
 8000fd8:	6021      	str	r1, [r4, #0]
 8000fda:	6821      	ldr	r1, [r4, #0]
 8000fdc:	400b      	ands	r3, r1
 8000fde:	9305      	str	r3, [sp, #20]
 8000fe0:	9b05      	ldr	r3, [sp, #20]
 8000fe2:	4986      	ldr	r1, [pc, #536]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fea:	2a00      	cmp	r2, #0
 8000fec:	d1d8      	bne.n	8000fa0 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000fee:	f7ff fa79 	bl	80004e4 <HAL_GetTick>
 8000ff2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	0292      	lsls	r2, r2, #10
 8000ffa:	4213      	tst	r3, r2
 8000ffc:	d100      	bne.n	8001000 <HAL_RCC_OscConfig+0x134>
 8000ffe:	e779      	b.n	8000ef4 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fa70 	bl	80004e4 <HAL_GetTick>
 8001004:	1bc0      	subs	r0, r0, r7
 8001006:	2864      	cmp	r0, #100	; 0x64
 8001008:	d9f4      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x128>
 800100a:	e7d6      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800100c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800100e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001010:	4213      	tst	r3, r2
 8001012:	d003      	beq.n	800101c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001014:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001016:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001018:	4311      	orrs	r1, r2
 800101a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800101c:	2e04      	cmp	r6, #4
 800101e:	d004      	beq.n	800102a <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001020:	2e0c      	cmp	r6, #12
 8001022:	d125      	bne.n	8001070 <HAL_RCC_OscConfig+0x1a4>
 8001024:	9a01      	ldr	r2, [sp, #4]
 8001026:	2a00      	cmp	r2, #0
 8001028:	d122      	bne.n	8001070 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800102a:	6822      	ldr	r2, [r4, #0]
 800102c:	0752      	lsls	r2, r2, #29
 800102e:	d502      	bpl.n	8001036 <HAL_RCC_OscConfig+0x16a>
 8001030:	2b00      	cmp	r3, #0
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x16a>
 8001034:	e74f      	b.n	8000ed6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	6861      	ldr	r1, [r4, #4]
 8001038:	692a      	ldr	r2, [r5, #16]
 800103a:	4871      	ldr	r0, [pc, #452]	; (8001200 <HAL_RCC_OscConfig+0x334>)
 800103c:	0212      	lsls	r2, r2, #8
 800103e:	4001      	ands	r1, r0
 8001040:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001042:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001044:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001046:	6822      	ldr	r2, [r4, #0]
 8001048:	438a      	bics	r2, r1
 800104a:	4313      	orrs	r3, r2
 800104c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800104e:	f7ff ff01 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 8001052:	68e3      	ldr	r3, [r4, #12]
 8001054:	4a66      	ldr	r2, [pc, #408]	; (80011f0 <HAL_RCC_OscConfig+0x324>)
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	0f1b      	lsrs	r3, r3, #28
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	40d8      	lsrs	r0, r3
 800105e:	4b65      	ldr	r3, [pc, #404]	; (80011f4 <HAL_RCC_OscConfig+0x328>)
 8001060:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff f9fa 	bl	800045c <HAL_InitTick>
      if(status != HAL_OK)
 8001068:	2800      	cmp	r0, #0
 800106a:	d100      	bne.n	800106e <HAL_RCC_OscConfig+0x1a2>
 800106c:	e746      	b.n	8000efc <HAL_RCC_OscConfig+0x30>
 800106e:	e733      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8001070:	2b00      	cmp	r3, #0
 8001072:	d019      	beq.n	80010a8 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001074:	2109      	movs	r1, #9
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	438a      	bics	r2, r1
 800107a:	4313      	orrs	r3, r2
 800107c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800107e:	f7ff fa31 	bl	80004e4 <HAL_GetTick>
 8001082:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001084:	2204      	movs	r2, #4
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	4213      	tst	r3, r2
 800108a:	d007      	beq.n	800109c <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	6862      	ldr	r2, [r4, #4]
 800108e:	692b      	ldr	r3, [r5, #16]
 8001090:	495b      	ldr	r1, [pc, #364]	; (8001200 <HAL_RCC_OscConfig+0x334>)
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	400a      	ands	r2, r1
 8001096:	4313      	orrs	r3, r2
 8001098:	6063      	str	r3, [r4, #4]
 800109a:	e72f      	b.n	8000efc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fa22 	bl	80004e4 <HAL_GetTick>
 80010a0:	1bc0      	subs	r0, r0, r7
 80010a2:	2802      	cmp	r0, #2
 80010a4:	d9ee      	bls.n	8001084 <HAL_RCC_OscConfig+0x1b8>
 80010a6:	e788      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80010a8:	2201      	movs	r2, #1
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	4393      	bics	r3, r2
 80010ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010b0:	f7ff fa18 	bl	80004e4 <HAL_GetTick>
 80010b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010b6:	2204      	movs	r2, #4
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	4213      	tst	r3, r2
 80010bc:	d100      	bne.n	80010c0 <HAL_RCC_OscConfig+0x1f4>
 80010be:	e71d      	b.n	8000efc <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c0:	f7ff fa10 	bl	80004e4 <HAL_GetTick>
 80010c4:	1bc0      	subs	r0, r0, r7
 80010c6:	2802      	cmp	r0, #2
 80010c8:	d9f5      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1ea>
 80010ca:	e776      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010cc:	69eb      	ldr	r3, [r5, #28]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d020      	beq.n	8001114 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4313      	orrs	r3, r2
 80010da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010dc:	f7ff fa02 	bl	80004e4 <HAL_GetTick>
 80010e0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4213      	tst	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ec:	6863      	ldr	r3, [r4, #4]
 80010ee:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <HAL_RCC_OscConfig+0x320>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80010f4:	4313      	orrs	r3, r2
 80010f6:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f8:	6862      	ldr	r2, [r4, #4]
 80010fa:	6a2b      	ldr	r3, [r5, #32]
 80010fc:	0212      	lsls	r2, r2, #8
 80010fe:	061b      	lsls	r3, r3, #24
 8001100:	0a12      	lsrs	r2, r2, #8
 8001102:	4313      	orrs	r3, r2
 8001104:	6063      	str	r3, [r4, #4]
 8001106:	e725      	b.n	8000f54 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001108:	f7ff f9ec 	bl	80004e4 <HAL_GetTick>
 800110c:	1bc0      	subs	r0, r0, r7
 800110e:	2802      	cmp	r0, #2
 8001110:	d9e7      	bls.n	80010e2 <HAL_RCC_OscConfig+0x216>
 8001112:	e752      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	4a3b      	ldr	r2, [pc, #236]	; (8001204 <HAL_RCC_OscConfig+0x338>)
 8001118:	4013      	ands	r3, r2
 800111a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800111c:	f7ff f9e2 	bl	80004e4 <HAL_GetTick>
 8001120:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4213      	tst	r3, r2
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x262>
 800112c:	e712      	b.n	8000f54 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800112e:	f7ff f9d9 	bl	80004e4 <HAL_GetTick>
 8001132:	1bc0      	subs	r0, r0, r7
 8001134:	2802      	cmp	r0, #2
 8001136:	d9f4      	bls.n	8001122 <HAL_RCC_OscConfig+0x256>
 8001138:	e73f      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113a:	696a      	ldr	r2, [r5, #20]
 800113c:	2301      	movs	r3, #1
 800113e:	2a00      	cmp	r2, #0
 8001140:	d010      	beq.n	8001164 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8001142:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001144:	4313      	orrs	r3, r2
 8001146:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001148:	f7ff f9cc 	bl	80004e4 <HAL_GetTick>
 800114c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800114e:	2202      	movs	r2, #2
 8001150:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001152:	4213      	tst	r3, r2
 8001154:	d000      	beq.n	8001158 <HAL_RCC_OscConfig+0x28c>
 8001156:	e701      	b.n	8000f5c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff f9c4 	bl	80004e4 <HAL_GetTick>
 800115c:	1bc0      	subs	r0, r0, r7
 800115e:	2802      	cmp	r0, #2
 8001160:	d9f5      	bls.n	800114e <HAL_RCC_OscConfig+0x282>
 8001162:	e72a      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8001164:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001166:	439a      	bics	r2, r3
 8001168:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800116a:	f7ff f9bb 	bl	80004e4 <HAL_GetTick>
 800116e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001170:	2202      	movs	r2, #2
 8001172:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001174:	4213      	tst	r3, r2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x2ae>
 8001178:	e6f0      	b.n	8000f5c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff f9b3 	bl	80004e4 <HAL_GetTick>
 800117e:	1bc0      	subs	r0, r0, r7
 8001180:	2802      	cmp	r0, #2
 8001182:	d9f5      	bls.n	8001170 <HAL_RCC_OscConfig+0x2a4>
 8001184:	e719      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001186:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001188:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800118c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800118e:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001190:	421a      	tst	r2, r3
 8001192:	d104      	bne.n	800119e <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001196:	4313      	orrs	r3, r2
 8001198:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	4f19      	ldr	r7, [pc, #100]	; (8001208 <HAL_RCC_OscConfig+0x33c>)
 80011a2:	0052      	lsls	r2, r2, #1
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4213      	tst	r3, r2
 80011a8:	d008      	beq.n	80011bc <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	68ab      	ldr	r3, [r5, #8]
 80011ae:	0052      	lsls	r2, r2, #1
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d12b      	bne.n	800120c <HAL_RCC_OscConfig+0x340>
 80011b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80011b6:	4313      	orrs	r3, r2
 80011b8:	6523      	str	r3, [r4, #80]	; 0x50
 80011ba:	e04c      	b.n	8001256 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011bc:	2280      	movs	r2, #128	; 0x80
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	4313      	orrs	r3, r2
 80011c4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80011c6:	f7ff f98d 	bl	80004e4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80011ce:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	9303      	str	r3, [sp, #12]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	9a03      	ldr	r2, [sp, #12]
 80011d6:	4213      	tst	r3, r2
 80011d8:	d1e7      	bne.n	80011aa <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011da:	f7ff f983 	bl	80004e4 <HAL_GetTick>
 80011de:	9b02      	ldr	r3, [sp, #8]
 80011e0:	1ac0      	subs	r0, r0, r3
 80011e2:	2864      	cmp	r0, #100	; 0x64
 80011e4:	d9f5      	bls.n	80011d2 <HAL_RCC_OscConfig+0x306>
 80011e6:	e6e8      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
 80011e8:	40021000 	.word	0x40021000
 80011ec:	ffff1fff 	.word	0xffff1fff
 80011f0:	0800226d 	.word	0x0800226d
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	fffeffff 	.word	0xfffeffff
 80011fc:	fffbffff 	.word	0xfffbffff
 8001200:	ffffe0ff 	.word	0xffffe0ff
 8001204:	fffffeff 	.word	0xfffffeff
 8001208:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	2b00      	cmp	r3, #0
 800120e:	d116      	bne.n	800123e <HAL_RCC_OscConfig+0x372>
 8001210:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001212:	4a6c      	ldr	r2, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x4f8>)
 8001214:	4013      	ands	r3, r2
 8001216:	6523      	str	r3, [r4, #80]	; 0x50
 8001218:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800121a:	4a6b      	ldr	r2, [pc, #428]	; (80013c8 <HAL_RCC_OscConfig+0x4fc>)
 800121c:	4013      	ands	r3, r2
 800121e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001220:	f7ff f960 	bl	80004e4 <HAL_GetTick>
 8001224:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4213      	tst	r3, r2
 800122e:	d02a      	beq.n	8001286 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001230:	f7ff f958 	bl	80004e4 <HAL_GetTick>
 8001234:	4b65      	ldr	r3, [pc, #404]	; (80013cc <HAL_RCC_OscConfig+0x500>)
 8001236:	1bc0      	subs	r0, r0, r7
 8001238:	4298      	cmp	r0, r3
 800123a:	d9f4      	bls.n	8001226 <HAL_RCC_OscConfig+0x35a>
 800123c:	e6bd      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123e:	21a0      	movs	r1, #160	; 0xa0
 8001240:	00c9      	lsls	r1, r1, #3
 8001242:	428b      	cmp	r3, r1
 8001244:	d10b      	bne.n	800125e <HAL_RCC_OscConfig+0x392>
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	430b      	orrs	r3, r1
 800124e:	6523      	str	r3, [r4, #80]	; 0x50
 8001250:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001252:	431a      	orrs	r2, r3
 8001254:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001256:	f7ff f945 	bl	80004e4 <HAL_GetTick>
 800125a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800125c:	e00e      	b.n	800127c <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001260:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <HAL_RCC_OscConfig+0x4f8>)
 8001262:	4013      	ands	r3, r2
 8001264:	6523      	str	r3, [r4, #80]	; 0x50
 8001266:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001268:	4a57      	ldr	r2, [pc, #348]	; (80013c8 <HAL_RCC_OscConfig+0x4fc>)
 800126a:	4013      	ands	r3, r2
 800126c:	e7a4      	b.n	80011b8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7ff f939 	bl	80004e4 <HAL_GetTick>
 8001272:	4b56      	ldr	r3, [pc, #344]	; (80013cc <HAL_RCC_OscConfig+0x500>)
 8001274:	1bc0      	subs	r0, r0, r7
 8001276:	4298      	cmp	r0, r3
 8001278:	d900      	bls.n	800127c <HAL_RCC_OscConfig+0x3b0>
 800127a:	e69e      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4213      	tst	r3, r2
 8001284:	d0f3      	beq.n	800126e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8001286:	9b01      	ldr	r3, [sp, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d000      	beq.n	800128e <HAL_RCC_OscConfig+0x3c2>
 800128c:	e66a      	b.n	8000f64 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 800128e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001290:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <HAL_RCC_OscConfig+0x504>)
 8001292:	4013      	ands	r3, r2
 8001294:	63a3      	str	r3, [r4, #56]	; 0x38
 8001296:	e665      	b.n	8000f64 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001298:	69a9      	ldr	r1, [r5, #24]
 800129a:	2301      	movs	r3, #1
 800129c:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_RCC_OscConfig+0x508>)
 800129e:	2900      	cmp	r1, #0
 80012a0:	d018      	beq.n	80012d4 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 80012a2:	68a1      	ldr	r1, [r4, #8]
 80012a4:	4319      	orrs	r1, r3
 80012a6:	60a1      	str	r1, [r4, #8]
 80012a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6363      	str	r3, [r4, #52]	; 0x34
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	6a11      	ldr	r1, [r2, #32]
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80012b8:	f7ff f914 	bl	80004e4 <HAL_GetTick>
 80012bc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012be:	2202      	movs	r2, #2
 80012c0:	68a3      	ldr	r3, [r4, #8]
 80012c2:	4213      	tst	r3, r2
 80012c4:	d000      	beq.n	80012c8 <HAL_RCC_OscConfig+0x3fc>
 80012c6:	e651      	b.n	8000f6c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012c8:	f7ff f90c 	bl	80004e4 <HAL_GetTick>
 80012cc:	1bc0      	subs	r0, r0, r7
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f5      	bls.n	80012be <HAL_RCC_OscConfig+0x3f2>
 80012d2:	e672      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 80012d4:	68a1      	ldr	r1, [r4, #8]
 80012d6:	4399      	bics	r1, r3
 80012d8:	60a1      	str	r1, [r4, #8]
 80012da:	6a13      	ldr	r3, [r2, #32]
 80012dc:	493e      	ldr	r1, [pc, #248]	; (80013d8 <HAL_RCC_OscConfig+0x50c>)
 80012de:	400b      	ands	r3, r1
 80012e0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80012e2:	f7ff f8ff 	bl	80004e4 <HAL_GetTick>
 80012e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012e8:	2202      	movs	r2, #2
 80012ea:	68a3      	ldr	r3, [r4, #8]
 80012ec:	4213      	tst	r3, r2
 80012ee:	d100      	bne.n	80012f2 <HAL_RCC_OscConfig+0x426>
 80012f0:	e63c      	b.n	8000f6c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012f2:	f7ff f8f7 	bl	80004e4 <HAL_GetTick>
 80012f6:	1bc0      	subs	r0, r0, r7
 80012f8:	2802      	cmp	r0, #2
 80012fa:	d9f5      	bls.n	80012e8 <HAL_RCC_OscConfig+0x41c>
 80012fc:	e65d      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012fe:	2e0c      	cmp	r6, #12
 8001300:	d043      	beq.n	800138a <HAL_RCC_OscConfig+0x4be>
 8001302:	4a36      	ldr	r2, [pc, #216]	; (80013dc <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001304:	2b02      	cmp	r3, #2
 8001306:	d12e      	bne.n	8001366 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8001308:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800130a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800130c:	4013      	ands	r3, r2
 800130e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001310:	f7ff f8e8 	bl	80004e4 <HAL_GetTick>
 8001314:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001316:	04b6      	lsls	r6, r6, #18
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	4233      	tst	r3, r6
 800131c:	d11d      	bne.n	800135a <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001320:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001322:	68e2      	ldr	r2, [r4, #12]
 8001324:	430b      	orrs	r3, r1
 8001326:	492e      	ldr	r1, [pc, #184]	; (80013e0 <HAL_RCC_OscConfig+0x514>)
 8001328:	400a      	ands	r2, r1
 800132a:	4313      	orrs	r3, r2
 800132c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800132e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001330:	4313      	orrs	r3, r2
 8001332:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	6822      	ldr	r2, [r4, #0]
 8001338:	045b      	lsls	r3, r3, #17
 800133a:	4313      	orrs	r3, r2
 800133c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800133e:	f7ff f8d1 	bl	80004e4 <HAL_GetTick>
 8001342:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001344:	04ad      	lsls	r5, r5, #18
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	422b      	tst	r3, r5
 800134a:	d000      	beq.n	800134e <HAL_RCC_OscConfig+0x482>
 800134c:	e612      	b.n	8000f74 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134e:	f7ff f8c9 	bl	80004e4 <HAL_GetTick>
 8001352:	1b80      	subs	r0, r0, r6
 8001354:	2802      	cmp	r0, #2
 8001356:	d9f6      	bls.n	8001346 <HAL_RCC_OscConfig+0x47a>
 8001358:	e62f      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff f8c3 	bl	80004e4 <HAL_GetTick>
 800135e:	1bc0      	subs	r0, r0, r7
 8001360:	2802      	cmp	r0, #2
 8001362:	d9d9      	bls.n	8001318 <HAL_RCC_OscConfig+0x44c>
 8001364:	e629      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8001366:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001368:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800136a:	4013      	ands	r3, r2
 800136c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800136e:	f7ff f8b9 	bl	80004e4 <HAL_GetTick>
 8001372:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001374:	04ad      	lsls	r5, r5, #18
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	422b      	tst	r3, r5
 800137a:	d100      	bne.n	800137e <HAL_RCC_OscConfig+0x4b2>
 800137c:	e5fa      	b.n	8000f74 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff f8b1 	bl	80004e4 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	2802      	cmp	r0, #2
 8001386:	d9f6      	bls.n	8001376 <HAL_RCC_OscConfig+0x4aa>
 8001388:	e617      	b.n	8000fba <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 800138a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800138c:	2b01      	cmp	r3, #1
 800138e:	d100      	bne.n	8001392 <HAL_RCC_OscConfig+0x4c6>
 8001390:	e5a2      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001394:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001398:	0252      	lsls	r2, r2, #9
 800139a:	401a      	ands	r2, r3
        return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139e:	428a      	cmp	r2, r1
 80013a0:	d000      	beq.n	80013a4 <HAL_RCC_OscConfig+0x4d8>
 80013a2:	e599      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013a4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013a8:	0392      	lsls	r2, r2, #14
 80013aa:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ac:	428a      	cmp	r2, r1
 80013ae:	d000      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4e6>
 80013b0:	e592      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80013b2:	20c0      	movs	r0, #192	; 0xc0
 80013b4:	0400      	lsls	r0, r0, #16
 80013b6:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013b8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80013ba:	1a18      	subs	r0, r3, r0
 80013bc:	1e43      	subs	r3, r0, #1
 80013be:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80013c0:	b2c0      	uxtb	r0, r0
 80013c2:	e589      	b.n	8000ed8 <HAL_RCC_OscConfig+0xc>
 80013c4:	fffffeff 	.word	0xfffffeff
 80013c8:	fffffbff 	.word	0xfffffbff
 80013cc:	00001388 	.word	0x00001388
 80013d0:	efffffff 	.word	0xefffffff
 80013d4:	40010000 	.word	0x40010000
 80013d8:	ffffdfff 	.word	0xffffdfff
 80013dc:	feffffff 	.word	0xfeffffff
 80013e0:	ff02ffff 	.word	0xff02ffff

080013e4 <HAL_RCC_ClockConfig>:
{
 80013e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013e6:	1e06      	subs	r6, r0, #0
 80013e8:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80013ec:	2001      	movs	r0, #1
}
 80013ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f0:	2201      	movs	r2, #1
 80013f2:	4c51      	ldr	r4, [pc, #324]	; (8001538 <HAL_RCC_ClockConfig+0x154>)
 80013f4:	9901      	ldr	r1, [sp, #4]
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	4013      	ands	r3, r2
 80013fa:	428b      	cmp	r3, r1
 80013fc:	d327      	bcc.n	800144e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013fe:	6832      	ldr	r2, [r6, #0]
 8001400:	0793      	lsls	r3, r2, #30
 8001402:	d42f      	bmi.n	8001464 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001404:	07d3      	lsls	r3, r2, #31
 8001406:	d435      	bmi.n	8001474 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001408:	2301      	movs	r3, #1
 800140a:	6822      	ldr	r2, [r4, #0]
 800140c:	9901      	ldr	r1, [sp, #4]
 800140e:	401a      	ands	r2, r3
 8001410:	4291      	cmp	r1, r2
 8001412:	d200      	bcs.n	8001416 <HAL_RCC_ClockConfig+0x32>
 8001414:	e081      	b.n	800151a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001416:	6832      	ldr	r2, [r6, #0]
 8001418:	4c48      	ldr	r4, [pc, #288]	; (800153c <HAL_RCC_ClockConfig+0x158>)
 800141a:	0753      	lsls	r3, r2, #29
 800141c:	d500      	bpl.n	8001420 <HAL_RCC_ClockConfig+0x3c>
 800141e:	e084      	b.n	800152a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001420:	0713      	lsls	r3, r2, #28
 8001422:	d506      	bpl.n	8001432 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001424:	68e2      	ldr	r2, [r4, #12]
 8001426:	6933      	ldr	r3, [r6, #16]
 8001428:	4945      	ldr	r1, [pc, #276]	; (8001540 <HAL_RCC_ClockConfig+0x15c>)
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	400a      	ands	r2, r1
 800142e:	4313      	orrs	r3, r2
 8001430:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001432:	f7ff fd0f 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 8001436:	68e3      	ldr	r3, [r4, #12]
 8001438:	4a42      	ldr	r2, [pc, #264]	; (8001544 <HAL_RCC_ClockConfig+0x160>)
 800143a:	061b      	lsls	r3, r3, #24
 800143c:	0f1b      	lsrs	r3, r3, #28
 800143e:	5cd3      	ldrb	r3, [r2, r3]
 8001440:	40d8      	lsrs	r0, r3
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_RCC_ClockConfig+0x164>)
 8001444:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff f808 	bl	800045c <HAL_InitTick>
 800144c:	e7cf      	b.n	80013ee <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	9901      	ldr	r1, [sp, #4]
 8001452:	4393      	bics	r3, r2
 8001454:	430b      	orrs	r3, r1
 8001456:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	4013      	ands	r3, r2
 800145c:	9a01      	ldr	r2, [sp, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	d1c4      	bne.n	80013ec <HAL_RCC_ClockConfig+0x8>
 8001462:	e7cc      	b.n	80013fe <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001464:	20f0      	movs	r0, #240	; 0xf0
 8001466:	4935      	ldr	r1, [pc, #212]	; (800153c <HAL_RCC_ClockConfig+0x158>)
 8001468:	68cb      	ldr	r3, [r1, #12]
 800146a:	4383      	bics	r3, r0
 800146c:	68b0      	ldr	r0, [r6, #8]
 800146e:	4303      	orrs	r3, r0
 8001470:	60cb      	str	r3, [r1, #12]
 8001472:	e7c7      	b.n	8001404 <HAL_RCC_ClockConfig+0x20>
 8001474:	4d31      	ldr	r5, [pc, #196]	; (800153c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001476:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001478:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	2a02      	cmp	r2, #2
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	d5b4      	bpl.n	80013ec <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001482:	2103      	movs	r1, #3
 8001484:	68eb      	ldr	r3, [r5, #12]
 8001486:	438b      	bics	r3, r1
 8001488:	4313      	orrs	r3, r2
 800148a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800148c:	f7ff f82a 	bl	80004e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001490:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001492:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001494:	2b02      	cmp	r3, #2
 8001496:	d119      	bne.n	80014cc <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001498:	220c      	movs	r2, #12
 800149a:	68eb      	ldr	r3, [r5, #12]
 800149c:	4013      	ands	r3, r2
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d0b2      	beq.n	8001408 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a2:	f7ff f81f 	bl	80004e4 <HAL_GetTick>
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <HAL_RCC_ClockConfig+0x168>)
 80014a8:	1bc0      	subs	r0, r0, r7
 80014aa:	4298      	cmp	r0, r3
 80014ac:	d9f4      	bls.n	8001498 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80014ae:	2003      	movs	r0, #3
 80014b0:	e79d      	b.n	80013ee <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b2:	2a03      	cmp	r2, #3
 80014b4:	d102      	bne.n	80014bc <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014b6:	019b      	lsls	r3, r3, #6
 80014b8:	d4e3      	bmi.n	8001482 <HAL_RCC_ClockConfig+0x9e>
 80014ba:	e797      	b.n	80013ec <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014bc:	2a01      	cmp	r2, #1
 80014be:	d102      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014c0:	075b      	lsls	r3, r3, #29
 80014c2:	d4de      	bmi.n	8001482 <HAL_RCC_ClockConfig+0x9e>
 80014c4:	e792      	b.n	80013ec <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014c6:	059b      	lsls	r3, r3, #22
 80014c8:	d4db      	bmi.n	8001482 <HAL_RCC_ClockConfig+0x9e>
 80014ca:	e78f      	b.n	80013ec <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d10b      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d0:	220c      	movs	r2, #12
 80014d2:	68eb      	ldr	r3, [r5, #12]
 80014d4:	4013      	ands	r3, r2
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d096      	beq.n	8001408 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014da:	f7ff f803 	bl	80004e4 <HAL_GetTick>
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_RCC_ClockConfig+0x168>)
 80014e0:	1bc0      	subs	r0, r0, r7
 80014e2:	4298      	cmp	r0, r3
 80014e4:	d9f4      	bls.n	80014d0 <HAL_RCC_ClockConfig+0xec>
 80014e6:	e7e2      	b.n	80014ae <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d010      	beq.n	800150e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80014ec:	220c      	movs	r2, #12
 80014ee:	68eb      	ldr	r3, [r5, #12]
 80014f0:	4213      	tst	r3, r2
 80014f2:	d089      	beq.n	8001408 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7fe fff6 	bl	80004e4 <HAL_GetTick>
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_RCC_ClockConfig+0x168>)
 80014fa:	1bc0      	subs	r0, r0, r7
 80014fc:	4298      	cmp	r0, r3
 80014fe:	d9f5      	bls.n	80014ec <HAL_RCC_ClockConfig+0x108>
 8001500:	e7d5      	b.n	80014ae <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001502:	f7fe ffef 	bl	80004e4 <HAL_GetTick>
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_RCC_ClockConfig+0x168>)
 8001508:	1bc0      	subs	r0, r0, r7
 800150a:	4298      	cmp	r0, r3
 800150c:	d8cf      	bhi.n	80014ae <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800150e:	220c      	movs	r2, #12
 8001510:	68eb      	ldr	r3, [r5, #12]
 8001512:	4013      	ands	r3, r2
 8001514:	2b04      	cmp	r3, #4
 8001516:	d1f4      	bne.n	8001502 <HAL_RCC_ClockConfig+0x11e>
 8001518:	e776      	b.n	8001408 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	439a      	bics	r2, r3
 800151e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001520:	6822      	ldr	r2, [r4, #0]
 8001522:	421a      	tst	r2, r3
 8001524:	d000      	beq.n	8001528 <HAL_RCC_ClockConfig+0x144>
 8001526:	e761      	b.n	80013ec <HAL_RCC_ClockConfig+0x8>
 8001528:	e775      	b.n	8001416 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152a:	68e3      	ldr	r3, [r4, #12]
 800152c:	4908      	ldr	r1, [pc, #32]	; (8001550 <HAL_RCC_ClockConfig+0x16c>)
 800152e:	400b      	ands	r3, r1
 8001530:	68f1      	ldr	r1, [r6, #12]
 8001532:	430b      	orrs	r3, r1
 8001534:	60e3      	str	r3, [r4, #12]
 8001536:	e773      	b.n	8001420 <HAL_RCC_ClockConfig+0x3c>
 8001538:	40022000 	.word	0x40022000
 800153c:	40021000 	.word	0x40021000
 8001540:	ffffc7ff 	.word	0xffffc7ff
 8001544:	0800226d 	.word	0x0800226d
 8001548:	2000000c 	.word	0x2000000c
 800154c:	00001388 	.word	0x00001388
 8001550:	fffff8ff 	.word	0xfffff8ff

08001554 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	055b      	lsls	r3, r3, #21
 800155c:	0f5b      	lsrs	r3, r3, #29
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001562:	6810      	ldr	r0, [r2, #0]
 8001564:	40d8      	lsrs	r0, r3
}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000
 800156c:	0800227d 	.word	0x0800227d
 8001570:	2000000c 	.word	0x2000000c

08001574 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	049b      	lsls	r3, r3, #18
 800157c:	0f5b      	lsrs	r3, r3, #29
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001582:	6810      	ldr	r0, [r2, #0]
 8001584:	40d8      	lsrs	r0, r3
}
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	0800227d 	.word	0x0800227d
 8001590:	2000000c 	.word	0x2000000c

08001594 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001594:	2382      	movs	r3, #130	; 0x82
{
 8001596:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001598:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800159a:	011b      	lsls	r3, r3, #4
{
 800159c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800159e:	421a      	tst	r2, r3
 80015a0:	d048      	beq.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80015a4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4c65      	ldr	r4, [pc, #404]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80015a8:	055b      	lsls	r3, r3, #21
 80015aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80015ac:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ae:	421a      	tst	r2, r3
 80015b0:	d104      	bne.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80015b4:	4313      	orrs	r3, r2
 80015b6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	2780      	movs	r7, #128	; 0x80
 80015be:	4e60      	ldr	r6, [pc, #384]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80015c0:	007f      	lsls	r7, r7, #1
 80015c2:	6833      	ldr	r3, [r6, #0]
 80015c4:	423b      	tst	r3, r7
 80015c6:	d077      	beq.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80015c8:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80015ca:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80015cc:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	0392      	lsls	r2, r2, #14
 80015d2:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80015d4:	4010      	ands	r0, r2
 80015d6:	4283      	cmp	r3, r0
 80015d8:	d103      	bne.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80015da:	68a8      	ldr	r0, [r5, #8]
 80015dc:	4002      	ands	r2, r0
 80015de:	4293      	cmp	r3, r2
 80015e0:	d009      	beq.n	80015f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	000a      	movs	r2, r1
 80015e6:	029b      	lsls	r3, r3, #10
 80015e8:	401a      	ands	r2, r3
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d103      	bne.n	80015f6 <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80015ee:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80015f0:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80015f2:	039b      	lsls	r3, r3, #14
 80015f4:	d471      	bmi.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x146>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80015f6:	22c0      	movs	r2, #192	; 0xc0
 80015f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80015fa:	0292      	lsls	r2, r2, #10
 80015fc:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80015fe:	d000      	beq.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001600:	e06c      	b.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x148>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001602:	6869      	ldr	r1, [r5, #4]
 8001604:	23c0      	movs	r3, #192	; 0xc0
 8001606:	000a      	movs	r2, r1
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	401a      	ands	r2, r3
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	484c      	ldr	r0, [pc, #304]	; (8001744 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001614:	4003      	ands	r3, r0
 8001616:	20c0      	movs	r0, #192	; 0xc0
 8001618:	0380      	lsls	r0, r0, #14
 800161a:	4001      	ands	r1, r0
 800161c:	430b      	orrs	r3, r1
 800161e:	6023      	str	r3, [r4, #0]
 8001620:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001622:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001624:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001626:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8001628:	2b01      	cmp	r3, #1
 800162a:	d103      	bne.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800162e:	4a46      	ldr	r2, [pc, #280]	; (8001748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001630:	4013      	ands	r3, r2
 8001632:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	07da      	lsls	r2, r3, #31
 8001638:	d506      	bpl.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800163a:	2003      	movs	r0, #3
 800163c:	493f      	ldr	r1, [pc, #252]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800163e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001640:	4382      	bics	r2, r0
 8001642:	68e8      	ldr	r0, [r5, #12]
 8001644:	4302      	orrs	r2, r0
 8001646:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001648:	079a      	lsls	r2, r3, #30
 800164a:	d506      	bpl.n	800165a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800164c:	200c      	movs	r0, #12
 800164e:	493b      	ldr	r1, [pc, #236]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001650:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001652:	4382      	bics	r2, r0
 8001654:	6928      	ldr	r0, [r5, #16]
 8001656:	4302      	orrs	r2, r0
 8001658:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800165a:	075a      	lsls	r2, r3, #29
 800165c:	d506      	bpl.n	800166c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800165e:	4937      	ldr	r1, [pc, #220]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001660:	483a      	ldr	r0, [pc, #232]	; (800174c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001662:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001664:	4002      	ands	r2, r0
 8001666:	6968      	ldr	r0, [r5, #20]
 8001668:	4302      	orrs	r2, r0
 800166a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800166c:	071a      	lsls	r2, r3, #28
 800166e:	d506      	bpl.n	800167e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001670:	4932      	ldr	r1, [pc, #200]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001672:	4837      	ldr	r0, [pc, #220]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001674:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001676:	4002      	ands	r2, r0
 8001678:	69a8      	ldr	r0, [r5, #24]
 800167a:	4302      	orrs	r2, r0
 800167c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800167e:	05da      	lsls	r2, r3, #23
 8001680:	d506      	bpl.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001682:	492e      	ldr	r1, [pc, #184]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001684:	4833      	ldr	r0, [pc, #204]	; (8001754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001686:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001688:	4002      	ands	r2, r0
 800168a:	69e8      	ldr	r0, [r5, #28]
 800168c:	4302      	orrs	r2, r0
 800168e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001690:	065a      	lsls	r2, r3, #25
 8001692:	d506      	bpl.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001694:	4929      	ldr	r1, [pc, #164]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001696:	4830      	ldr	r0, [pc, #192]	; (8001758 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001698:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800169a:	4002      	ands	r2, r0
 800169c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800169e:	4302      	orrs	r2, r0
 80016a0:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80016a2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	d518      	bpl.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80016a8:	4a24      	ldr	r2, [pc, #144]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80016aa:	492c      	ldr	r1, [pc, #176]	; (800175c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80016ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80016ae:	400b      	ands	r3, r1
 80016b0:	6a29      	ldr	r1, [r5, #32]
 80016b2:	430b      	orrs	r3, r1
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	e010      	b.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x146>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b8:	6833      	ldr	r3, [r6, #0]
 80016ba:	433b      	orrs	r3, r7
 80016bc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016be:	f7fe ff11 	bl	80004e4 <HAL_GetTick>
 80016c2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	6833      	ldr	r3, [r6, #0]
 80016c6:	423b      	tst	r3, r7
 80016c8:	d000      	beq.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x138>
 80016ca:	e77d      	b.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016cc:	f7fe ff0a 	bl	80004e4 <HAL_GetTick>
 80016d0:	9b01      	ldr	r3, [sp, #4]
 80016d2:	1ac0      	subs	r0, r0, r3
 80016d4:	2864      	cmp	r0, #100	; 0x64
 80016d6:	d9f5      	bls.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
          return HAL_TIMEOUT;
 80016d8:	2003      	movs	r0, #3
}
 80016da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80016dc:	4011      	ands	r1, r2
 80016de:	428b      	cmp	r3, r1
 80016e0:	d002      	beq.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016e2:	6829      	ldr	r1, [r5, #0]
 80016e4:	0689      	lsls	r1, r1, #26
 80016e6:	d408      	bmi.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x166>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80016e8:	68a9      	ldr	r1, [r5, #8]
 80016ea:	400a      	ands	r2, r1
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d100      	bne.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80016f0:	e787      	b.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	d400      	bmi.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x166>
 80016f8:	e783      	b.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_BACKUPRESET_FORCE();
 80016fa:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80016fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80016fe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001700:	0312      	lsls	r2, r2, #12
 8001702:	4302      	orrs	r2, r0
 8001704:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001706:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 800170a:	4815      	ldr	r0, [pc, #84]	; (8001760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800170c:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800170e:	4002      	ands	r2, r0
 8001710:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8001712:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001714:	05cb      	lsls	r3, r1, #23
 8001716:	d400      	bmi.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001718:	e773      	b.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        tickstart = HAL_GetTick();
 800171a:	f7fe fee3 	bl	80004e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800171e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8001720:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001722:	00bf      	lsls	r7, r7, #2
 8001724:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001726:	423b      	tst	r3, r7
 8001728:	d000      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x198>
 800172a:	e76a      	b.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7fe feda 	bl	80004e4 <HAL_GetTick>
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001732:	1b80      	subs	r0, r0, r6
 8001734:	4298      	cmp	r0, r3
 8001736:	d9f5      	bls.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8001738:	e7ce      	b.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40021000 	.word	0x40021000
 8001740:	40007000 	.word	0x40007000
 8001744:	ffcfffff 	.word	0xffcfffff
 8001748:	efffffff 	.word	0xefffffff
 800174c:	fffff3ff 	.word	0xfffff3ff
 8001750:	ffffcfff 	.word	0xffffcfff
 8001754:	fffcffff 	.word	0xfffcffff
 8001758:	fbffffff 	.word	0xfbffffff
 800175c:	fff3ffff 	.word	0xfff3ffff
 8001760:	fff7ffff 	.word	0xfff7ffff
 8001764:	00001388 	.word	0x00001388

08001768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800176c:	6925      	ldr	r5, [r4, #16]
 800176e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001770:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001772:	432a      	orrs	r2, r5
 8001774:	6965      	ldr	r5, [r4, #20]
 8001776:	69c1      	ldr	r1, [r0, #28]
 8001778:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	4d81      	ldr	r5, [pc, #516]	; (8001984 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800177e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001780:	4028      	ands	r0, r5
 8001782:	4302      	orrs	r2, r0
 8001784:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	487f      	ldr	r0, [pc, #508]	; (8001988 <UART_SetConfig+0x220>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800178a:	4d80      	ldr	r5, [pc, #512]	; (800198c <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800178c:	4002      	ands	r2, r0
 800178e:	68e0      	ldr	r0, [r4, #12]
 8001790:	4302      	orrs	r2, r0
 8001792:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001794:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001796:	42ab      	cmp	r3, r5
 8001798:	d001      	beq.n	800179e <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800179a:	6a22      	ldr	r2, [r4, #32]
 800179c:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	4e7b      	ldr	r6, [pc, #492]	; (8001990 <UART_SetConfig+0x228>)
 80017a2:	4032      	ands	r2, r6
 80017a4:	4302      	orrs	r2, r0
 80017a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017a8:	4a7a      	ldr	r2, [pc, #488]	; (8001994 <UART_SetConfig+0x22c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d113      	bne.n	80017d6 <UART_SetConfig+0x6e>
 80017ae:	2203      	movs	r2, #3
 80017b0:	4b79      	ldr	r3, [pc, #484]	; (8001998 <UART_SetConfig+0x230>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	4013      	ands	r3, r2
 80017b6:	4a79      	ldr	r2, [pc, #484]	; (800199c <UART_SetConfig+0x234>)
 80017b8:	5cd0      	ldrb	r0, [r2, r3]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	4299      	cmp	r1, r3
 80017c0:	d100      	bne.n	80017c4 <UART_SetConfig+0x5c>
 80017c2:	e0d1      	b.n	8001968 <UART_SetConfig+0x200>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80017c4:	2808      	cmp	r0, #8
 80017c6:	d826      	bhi.n	8001816 <UART_SetConfig+0xae>
 80017c8:	f7fe fc9e 	bl	8000108 <__gnu_thumb1_case_uqi>
 80017cc:	259996c0 	.word	0x259996c0
 80017d0:	252525b4 	.word	0x252525b4
 80017d4:	b7          	.byte	0xb7
 80017d5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017d6:	4a72      	ldr	r2, [pc, #456]	; (80019a0 <UART_SetConfig+0x238>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d105      	bne.n	80017e8 <UART_SetConfig+0x80>
 80017dc:	220c      	movs	r2, #12
 80017de:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <UART_SetConfig+0x230>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4013      	ands	r3, r2
 80017e4:	4a6f      	ldr	r2, [pc, #444]	; (80019a4 <UART_SetConfig+0x23c>)
 80017e6:	e7e7      	b.n	80017b8 <UART_SetConfig+0x50>
 80017e8:	4a6f      	ldr	r2, [pc, #444]	; (80019a8 <UART_SetConfig+0x240>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d100      	bne.n	80017f0 <UART_SetConfig+0x88>
 80017ee:	e0a9      	b.n	8001944 <UART_SetConfig+0x1dc>
 80017f0:	4a6e      	ldr	r2, [pc, #440]	; (80019ac <UART_SetConfig+0x244>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d100      	bne.n	80017f8 <UART_SetConfig+0x90>
 80017f6:	e0a5      	b.n	8001944 <UART_SetConfig+0x1dc>
 80017f8:	42ab      	cmp	r3, r5
 80017fa:	d000      	beq.n	80017fe <UART_SetConfig+0x96>
 80017fc:	e0ad      	b.n	800195a <UART_SetConfig+0x1f2>
 80017fe:	21c0      	movs	r1, #192	; 0xc0
 8001800:	2080      	movs	r0, #128	; 0x80
 8001802:	4a65      	ldr	r2, [pc, #404]	; (8001998 <UART_SetConfig+0x230>)
 8001804:	0109      	lsls	r1, r1, #4
 8001806:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001808:	00c0      	lsls	r0, r0, #3
 800180a:	400b      	ands	r3, r1
 800180c:	4283      	cmp	r3, r0
 800180e:	d038      	beq.n	8001882 <UART_SetConfig+0x11a>
 8001810:	d803      	bhi.n	800181a <UART_SetConfig+0xb2>
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00a      	beq.n	800182c <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001816:	2501      	movs	r5, #1
 8001818:	e00d      	b.n	8001836 <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800181a:	2080      	movs	r0, #128	; 0x80
 800181c:	0100      	lsls	r0, r0, #4
 800181e:	4283      	cmp	r3, r0
 8001820:	d00e      	beq.n	8001840 <UART_SetConfig+0xd8>
 8001822:	428b      	cmp	r3, r1
 8001824:	d1f7      	bne.n	8001816 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001826:	2080      	movs	r0, #128	; 0x80
 8001828:	0200      	lsls	r0, r0, #8
 800182a:	e00d      	b.n	8001848 <UART_SetConfig+0xe0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800182c:	f7ff fe92 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
 8001830:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8001832:	42a8      	cmp	r0, r5
 8001834:	d108      	bne.n	8001848 <UART_SetConfig+0xe0>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001836:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8001838:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 800183a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800183c:	6663      	str	r3, [r4, #100]	; 0x64
}
 800183e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001840:	6813      	ldr	r3, [r2, #0]
 8001842:	06db      	lsls	r3, r3, #27
 8001844:	d520      	bpl.n	8001888 <UART_SetConfig+0x120>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001846:	485a      	ldr	r0, [pc, #360]	; (80019b0 <UART_SetConfig+0x248>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001848:	2203      	movs	r2, #3
 800184a:	6863      	ldr	r3, [r4, #4]
 800184c:	435a      	muls	r2, r3
 800184e:	4282      	cmp	r2, r0
 8001850:	d8e1      	bhi.n	8001816 <UART_SetConfig+0xae>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001852:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001854:	4282      	cmp	r2, r0
 8001856:	d3de      	bcc.n	8001816 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001858:	2700      	movs	r7, #0
 800185a:	0e02      	lsrs	r2, r0, #24
 800185c:	0201      	lsls	r1, r0, #8
 800185e:	085e      	lsrs	r6, r3, #1
 8001860:	1989      	adds	r1, r1, r6
 8001862:	417a      	adcs	r2, r7
 8001864:	0008      	movs	r0, r1
 8001866:	0011      	movs	r1, r2
 8001868:	001a      	movs	r2, r3
 800186a:	003b      	movs	r3, r7
 800186c:	f7fe fcec 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <UART_SetConfig+0x24c>)
 8001872:	18c2      	adds	r2, r0, r3
 8001874:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <UART_SetConfig+0x250>)
 8001876:	429a      	cmp	r2, r3
 8001878:	d8cd      	bhi.n	8001816 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	003d      	movs	r5, r7
 800187e:	60d8      	str	r0, [r3, #12]
 8001880:	e7d9      	b.n	8001836 <UART_SetConfig+0xce>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001882:	f7ff fae7 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
        break;
 8001886:	e7d3      	b.n	8001830 <UART_SetConfig+0xc8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001888:	484c      	ldr	r0, [pc, #304]	; (80019bc <UART_SetConfig+0x254>)
 800188a:	e7dd      	b.n	8001848 <UART_SetConfig+0xe0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800188c:	f7ff fe62 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001890:	6863      	ldr	r3, [r4, #4]
 8001892:	0040      	lsls	r0, r0, #1
 8001894:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001896:	18c0      	adds	r0, r0, r3
 8001898:	6861      	ldr	r1, [r4, #4]
 800189a:	e00b      	b.n	80018b4 <UART_SetConfig+0x14c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800189c:	f7ff fe6a 	bl	8001574 <HAL_RCC_GetPCLK2Freq>
 80018a0:	e7f6      	b.n	8001890 <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018a2:	2510      	movs	r5, #16
 80018a4:	4b3c      	ldr	r3, [pc, #240]	; (8001998 <UART_SetConfig+0x230>)
 80018a6:	6861      	ldr	r1, [r4, #4]
 80018a8:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80018aa:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018ac:	4015      	ands	r5, r2
 80018ae:	d006      	beq.n	80018be <UART_SetConfig+0x156>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <UART_SetConfig+0x258>)
 80018b2:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018b4:	f7fe fc3c 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80018b8:	2500      	movs	r5, #0
 80018ba:	b283      	uxth	r3, r0
        break;
 80018bc:	e004      	b.n	80018c8 <UART_SetConfig+0x160>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <UART_SetConfig+0x25c>)
 80018c0:	18c0      	adds	r0, r0, r3
 80018c2:	f7fe fc35 	bl	8000130 <__udivsi3>
 80018c6:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018c8:	0019      	movs	r1, r3
 80018ca:	483f      	ldr	r0, [pc, #252]	; (80019c8 <UART_SetConfig+0x260>)
 80018cc:	3910      	subs	r1, #16
 80018ce:	4281      	cmp	r1, r0
 80018d0:	d8a1      	bhi.n	8001816 <UART_SetConfig+0xae>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018d2:	210f      	movs	r1, #15
 80018d4:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018d6:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018d8:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018da:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 80018dc:	6821      	ldr	r1, [r4, #0]
 80018de:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 80018e0:	60cb      	str	r3, [r1, #12]
 80018e2:	e7a8      	b.n	8001836 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018e4:	f7ff fab6 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 80018e8:	e7d2      	b.n	8001890 <UART_SetConfig+0x128>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018ea:	6863      	ldr	r3, [r4, #4]
 80018ec:	0858      	lsrs	r0, r3, #1
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	025b      	lsls	r3, r3, #9
 80018f2:	e7d0      	b.n	8001896 <UART_SetConfig+0x12e>
  uint32_t usartdiv                   = 0x00000000U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e7e7      	b.n	80018c8 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80018f8:	f7ff fe3c 	bl	8001574 <HAL_RCC_GetPCLK2Freq>
 80018fc:	e028      	b.n	8001950 <UART_SetConfig+0x1e8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018fe:	2510      	movs	r5, #16
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <UART_SetConfig+0x230>)
 8001902:	6861      	ldr	r1, [r4, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001906:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001908:	4015      	ands	r5, r2
 800190a:	d006      	beq.n	800191a <UART_SetConfig+0x1b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <UART_SetConfig+0x248>)
 800190e:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001910:	f7fe fc0e 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001914:	2500      	movs	r5, #0
 8001916:	b283      	uxth	r3, r0
        break;
 8001918:	e004      	b.n	8001924 <UART_SetConfig+0x1bc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800191a:	4b28      	ldr	r3, [pc, #160]	; (80019bc <UART_SetConfig+0x254>)
 800191c:	18c0      	adds	r0, r0, r3
 800191e:	f7fe fc07 	bl	8000130 <__udivsi3>
 8001922:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001924:	0019      	movs	r1, r3
 8001926:	4828      	ldr	r0, [pc, #160]	; (80019c8 <UART_SetConfig+0x260>)
 8001928:	3910      	subs	r1, #16
 800192a:	4281      	cmp	r1, r0
 800192c:	d900      	bls.n	8001930 <UART_SetConfig+0x1c8>
 800192e:	e772      	b.n	8001816 <UART_SetConfig+0xae>
      huart->Instance->BRR = usartdiv;
 8001930:	6821      	ldr	r1, [r4, #0]
 8001932:	e7d5      	b.n	80018e0 <UART_SetConfig+0x178>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001934:	f7ff fa8e 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 8001938:	e00a      	b.n	8001950 <UART_SetConfig+0x1e8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800193a:	6863      	ldr	r3, [r4, #4]
 800193c:	0858      	lsrs	r0, r3, #1
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	e007      	b.n	8001954 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	4299      	cmp	r1, r3
 800194a:	d09f      	beq.n	800188c <UART_SetConfig+0x124>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800194c:	f7ff fe02 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001950:	6863      	ldr	r3, [r4, #4]
 8001952:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001954:	18c0      	adds	r0, r0, r3
 8001956:	6861      	ldr	r1, [r4, #4]
 8001958:	e7da      	b.n	8001910 <UART_SetConfig+0x1a8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800195a:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 800195c:	2501      	movs	r5, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	4299      	cmp	r1, r3
 8001962:	d0c7      	beq.n	80018f4 <UART_SetConfig+0x18c>
  uint32_t usartdiv                   = 0x00000000U;
 8001964:	2300      	movs	r3, #0
 8001966:	e7dd      	b.n	8001924 <UART_SetConfig+0x1bc>
    switch (clocksource)
 8001968:	2808      	cmp	r0, #8
 800196a:	d900      	bls.n	800196e <UART_SetConfig+0x206>
 800196c:	e753      	b.n	8001816 <UART_SetConfig+0xae>
 800196e:	f7fe fbd5 	bl	800011c <__gnu_thumb1_case_shi>
 8001972:	ff8d      	.short	0xff8d
 8001974:	ff98ff95 	.word	0xff98ff95
 8001978:	ffb9ff52 	.word	0xffb9ff52
 800197c:	ff52ff52 	.word	0xff52ff52
 8001980:	ffbcff52 	.word	0xffbcff52
 8001984:	efff69f3 	.word	0xefff69f3
 8001988:	ffffcfff 	.word	0xffffcfff
 800198c:	40004800 	.word	0x40004800
 8001990:	fffff4ff 	.word	0xfffff4ff
 8001994:	40013800 	.word	0x40013800
 8001998:	40021000 	.word	0x40021000
 800199c:	0800225c 	.word	0x0800225c
 80019a0:	40004400 	.word	0x40004400
 80019a4:	08002260 	.word	0x08002260
 80019a8:	40004c00 	.word	0x40004c00
 80019ac:	40005000 	.word	0x40005000
 80019b0:	003d0900 	.word	0x003d0900
 80019b4:	fffffd00 	.word	0xfffffd00
 80019b8:	000ffcff 	.word	0x000ffcff
 80019bc:	00f42400 	.word	0x00f42400
 80019c0:	007a1200 	.word	0x007a1200
 80019c4:	01e84800 	.word	0x01e84800
 80019c8:	0000ffef 	.word	0x0000ffef

080019cc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80019ce:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019d0:	07da      	lsls	r2, r3, #31
 80019d2:	d506      	bpl.n	80019e2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019d4:	6801      	ldr	r1, [r0, #0]
 80019d6:	4c28      	ldr	r4, [pc, #160]	; (8001a78 <UART_AdvFeatureConfig+0xac>)
 80019d8:	684a      	ldr	r2, [r1, #4]
 80019da:	4022      	ands	r2, r4
 80019dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80019de:	4322      	orrs	r2, r4
 80019e0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019e2:	079a      	lsls	r2, r3, #30
 80019e4:	d506      	bpl.n	80019f4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019e6:	6801      	ldr	r1, [r0, #0]
 80019e8:	4c24      	ldr	r4, [pc, #144]	; (8001a7c <UART_AdvFeatureConfig+0xb0>)
 80019ea:	684a      	ldr	r2, [r1, #4]
 80019ec:	4022      	ands	r2, r4
 80019ee:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80019f0:	4322      	orrs	r2, r4
 80019f2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019f4:	075a      	lsls	r2, r3, #29
 80019f6:	d506      	bpl.n	8001a06 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019f8:	6801      	ldr	r1, [r0, #0]
 80019fa:	4c21      	ldr	r4, [pc, #132]	; (8001a80 <UART_AdvFeatureConfig+0xb4>)
 80019fc:	684a      	ldr	r2, [r1, #4]
 80019fe:	4022      	ands	r2, r4
 8001a00:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001a02:	4322      	orrs	r2, r4
 8001a04:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a06:	071a      	lsls	r2, r3, #28
 8001a08:	d506      	bpl.n	8001a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a0a:	6801      	ldr	r1, [r0, #0]
 8001a0c:	4c1d      	ldr	r4, [pc, #116]	; (8001a84 <UART_AdvFeatureConfig+0xb8>)
 8001a0e:	684a      	ldr	r2, [r1, #4]
 8001a10:	4022      	ands	r2, r4
 8001a12:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001a14:	4322      	orrs	r2, r4
 8001a16:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a18:	06da      	lsls	r2, r3, #27
 8001a1a:	d506      	bpl.n	8001a2a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a1c:	6801      	ldr	r1, [r0, #0]
 8001a1e:	4c1a      	ldr	r4, [pc, #104]	; (8001a88 <UART_AdvFeatureConfig+0xbc>)
 8001a20:	688a      	ldr	r2, [r1, #8]
 8001a22:	4022      	ands	r2, r4
 8001a24:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a26:	4322      	orrs	r2, r4
 8001a28:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a2a:	069a      	lsls	r2, r3, #26
 8001a2c:	d506      	bpl.n	8001a3c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a2e:	6801      	ldr	r1, [r0, #0]
 8001a30:	4c16      	ldr	r4, [pc, #88]	; (8001a8c <UART_AdvFeatureConfig+0xc0>)
 8001a32:	688a      	ldr	r2, [r1, #8]
 8001a34:	4022      	ands	r2, r4
 8001a36:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001a38:	4322      	orrs	r2, r4
 8001a3a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a3c:	065a      	lsls	r2, r3, #25
 8001a3e:	d510      	bpl.n	8001a62 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a40:	6801      	ldr	r1, [r0, #0]
 8001a42:	4d13      	ldr	r5, [pc, #76]	; (8001a90 <UART_AdvFeatureConfig+0xc4>)
 8001a44:	684a      	ldr	r2, [r1, #4]
 8001a46:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001a48:	402a      	ands	r2, r5
 8001a4a:	4322      	orrs	r2, r4
 8001a4c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	0352      	lsls	r2, r2, #13
 8001a52:	4294      	cmp	r4, r2
 8001a54:	d105      	bne.n	8001a62 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a56:	684a      	ldr	r2, [r1, #4]
 8001a58:	4c0e      	ldr	r4, [pc, #56]	; (8001a94 <UART_AdvFeatureConfig+0xc8>)
 8001a5a:	4022      	ands	r2, r4
 8001a5c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a5e:	4322      	orrs	r2, r4
 8001a60:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a62:	061b      	lsls	r3, r3, #24
 8001a64:	d506      	bpl.n	8001a74 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a66:	6802      	ldr	r2, [r0, #0]
 8001a68:	490b      	ldr	r1, [pc, #44]	; (8001a98 <UART_AdvFeatureConfig+0xcc>)
 8001a6a:	6853      	ldr	r3, [r2, #4]
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6053      	str	r3, [r2, #4]
  }
}
 8001a74:	bd30      	pop	{r4, r5, pc}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	fffdffff 	.word	0xfffdffff
 8001a7c:	fffeffff 	.word	0xfffeffff
 8001a80:	fffbffff 	.word	0xfffbffff
 8001a84:	ffff7fff 	.word	0xffff7fff
 8001a88:	ffffefff 	.word	0xffffefff
 8001a8c:	ffffdfff 	.word	0xffffdfff
 8001a90:	ffefffff 	.word	0xffefffff
 8001a94:	ff9fffff 	.word	0xff9fffff
 8001a98:	fff7ffff 	.word	0xfff7ffff

08001a9c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	000e      	movs	r6, r1
 8001aa2:	0015      	movs	r5, r2
 8001aa4:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	69d3      	ldr	r3, [r2, #28]
 8001aaa:	4033      	ands	r3, r6
 8001aac:	1b9b      	subs	r3, r3, r6
 8001aae:	4259      	negs	r1, r3
 8001ab0:	414b      	adcs	r3, r1
 8001ab2:	42ab      	cmp	r3, r5
 8001ab4:	d001      	beq.n	8001aba <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	e01b      	b.n	8001af2 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001aba:	9b06      	ldr	r3, [sp, #24]
 8001abc:	3301      	adds	r3, #1
 8001abe:	d0f3      	beq.n	8001aa8 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac0:	f7fe fd10 	bl	80004e4 <HAL_GetTick>
 8001ac4:	9b06      	ldr	r3, [sp, #24]
 8001ac6:	1bc0      	subs	r0, r0, r7
 8001ac8:	4283      	cmp	r3, r0
 8001aca:	d301      	bcc.n	8001ad0 <UART_WaitOnFlagUntilTimeout+0x34>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ea      	bne.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <UART_WaitOnFlagUntilTimeout+0x58>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001ad6:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ad8:	400a      	ands	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	31a3      	adds	r1, #163	; 0xa3
 8001ae0:	31ff      	adds	r1, #255	; 0xff
 8001ae2:	438a      	bics	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001aea:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001aec:	2300      	movs	r3, #0
 8001aee:	3470      	adds	r4, #112	; 0x70
 8001af0:	7023      	strb	r3, [r4, #0]
}
 8001af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af4:	fffffe5f 	.word	0xfffffe5f

08001af8 <HAL_UART_Transmit>:
{
 8001af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afa:	b087      	sub	sp, #28
 8001afc:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8001afe:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001b00:	0004      	movs	r4, r0
 8001b02:	000d      	movs	r5, r1
 8001b04:	0017      	movs	r7, r2
    return HAL_BUSY;
 8001b06:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d149      	bne.n	8001ba0 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8001b0c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8001b0e:	2900      	cmp	r1, #0
 8001b10:	d046      	beq.n	8001ba0 <HAL_UART_Transmit+0xa8>
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d044      	beq.n	8001ba0 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	68a2      	ldr	r2, [r4, #8]
 8001b1a:	015b      	lsls	r3, r3, #5
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d104      	bne.n	8001b2a <HAL_UART_Transmit+0x32>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8001b26:	4201      	tst	r1, r0
 8001b28:	d13a      	bne.n	8001ba0 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001b2a:	0023      	movs	r3, r4
 8001b2c:	3370      	adds	r3, #112	; 0x70
 8001b2e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8001b30:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001b32:	2a01      	cmp	r2, #1
 8001b34:	d034      	beq.n	8001ba0 <HAL_UART_Transmit+0xa8>
 8001b36:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b38:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8001b3a:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b3c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b3e:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b40:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001b42:	f7fe fccf 	bl	80004e4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001b46:	0023      	movs	r3, r4
 8001b48:	3350      	adds	r3, #80	; 0x50
 8001b4a:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	9303      	str	r3, [sp, #12]
 8001b50:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001b56:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b58:	015b      	lsls	r3, r3, #5
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d104      	bne.n	8001b68 <HAL_UART_Transmit+0x70>
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	42b3      	cmp	r3, r6
 8001b62:	d101      	bne.n	8001b68 <HAL_UART_Transmit+0x70>
 8001b64:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001b66:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001b68:	0023      	movs	r3, r4
 8001b6a:	3352      	adds	r3, #82	; 0x52
 8001b6c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b6e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8001b70:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8001b76:	2a00      	cmp	r2, #0
 8001b78:	d10a      	bne.n	8001b90 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b7a:	2140      	movs	r1, #64	; 0x40
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	f7ff ff8d 	bl	8001a9c <UART_WaitOnFlagUntilTimeout>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	d10b      	bne.n	8001b9e <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8001b86:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001b88:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001b8a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8001b8c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001b8e:	e007      	b.n	8001ba0 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b90:	2200      	movs	r2, #0
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	0020      	movs	r0, r4
 8001b96:	f7ff ff81 	bl	8001a9c <UART_WaitOnFlagUntilTimeout>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8001b9e:	2003      	movs	r0, #3
}
 8001ba0:	b007      	add	sp, #28
 8001ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001ba6:	2d00      	cmp	r5, #0
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001baa:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001bac:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bae:	05db      	lsls	r3, r3, #23
 8001bb0:	0ddb      	lsrs	r3, r3, #23
 8001bb2:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001bb4:	9b03      	ldr	r3, [sp, #12]
 8001bb6:	9a03      	ldr	r2, [sp, #12]
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	8013      	strh	r3, [r2, #0]
 8001bc0:	e7d2      	b.n	8001b68 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bc2:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001bc4:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bc6:	6293      	str	r3, [r2, #40]	; 0x28
 8001bc8:	e7f4      	b.n	8001bb4 <HAL_UART_Transmit+0xbc>
	...

08001bcc <UART_CheckIdleState>:
{
 8001bcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bce:	2600      	movs	r6, #0
{
 8001bd0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd2:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001bd4:	f7fe fc86 	bl	80004e4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bd8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001bda:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	071b      	lsls	r3, r3, #28
 8001be0:	d415      	bmi.n	8001c0e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	075b      	lsls	r3, r3, #29
 8001be8:	d50a      	bpl.n	8001c00 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <UART_CheckIdleState+0x5c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	03c9      	lsls	r1, r1, #15
 8001bf4:	002b      	movs	r3, r5
 8001bf6:	0020      	movs	r0, r4
 8001bf8:	f7ff ff50 	bl	8001a9c <UART_WaitOnFlagUntilTimeout>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d111      	bne.n	8001c24 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001c00:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001c02:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001c04:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001c06:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001c08:	3470      	adds	r4, #112	; 0x70
 8001c0a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001c0c:	e00b      	b.n	8001c26 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <UART_CheckIdleState+0x5c>)
 8001c12:	0032      	movs	r2, r6
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	0389      	lsls	r1, r1, #14
 8001c18:	0003      	movs	r3, r0
 8001c1a:	0020      	movs	r0, r4
 8001c1c:	f7ff ff3e 	bl	8001a9c <UART_WaitOnFlagUntilTimeout>
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d0de      	beq.n	8001be2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001c24:	2003      	movs	r0, #3
}
 8001c26:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001c28:	01ffffff 	.word	0x01ffffff

08001c2c <HAL_UART_Init>:
{
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001c30:	d101      	bne.n	8001c36 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
}
 8001c34:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001c36:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d104      	bne.n	8001c46 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	3270      	adds	r2, #112	; 0x70
 8001c40:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001c42:	f000 fa3d 	bl	80020c0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001c46:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001c48:	2101      	movs	r1, #1
 8001c4a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c4c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001c4e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c50:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001c52:	438b      	bics	r3, r1
 8001c54:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c56:	f7ff fd87 	bl	8001768 <UART_SetConfig>
 8001c5a:	2801      	cmp	r0, #1
 8001c5c:	d0e9      	beq.n	8001c32 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001c64:	0020      	movs	r0, r4
 8001c66:	f7ff feb1 	bl	80019cc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	4907      	ldr	r1, [pc, #28]	; (8001c8c <HAL_UART_Init+0x60>)
 8001c6e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001c70:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c72:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c74:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	438a      	bics	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001c86:	f7ff ffa1 	bl	8001bcc <UART_CheckIdleState>
 8001c8a:	e7d3      	b.n	8001c34 <HAL_UART_Init+0x8>
 8001c8c:	ffffb7ff 	.word	0xffffb7ff

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b510      	push	{r4, lr}
 8001c92:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c94:	2238      	movs	r2, #56	; 0x38
 8001c96:	2100      	movs	r1, #0
 8001c98:	a810      	add	r0, sp, #64	; 0x40
 8001c9a:	f000 facb 	bl	8002234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c9e:	2214      	movs	r2, #20
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	a801      	add	r0, sp, #4
 8001ca4:	f000 fac6 	bl	8002234 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca8:	2228      	movs	r2, #40	; 0x28
 8001caa:	2100      	movs	r1, #0
 8001cac:	a806      	add	r0, sp, #24
 8001cae:	f000 fac1 	bl	8002234 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb2:	4913      	ldr	r1, [pc, #76]	; (8001d00 <SystemClock_Config+0x70>)
 8001cb4:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <SystemClock_Config+0x74>)
 8001cb6:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cb8:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cba:	401a      	ands	r2, r3
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cc8:	3b0f      	subs	r3, #15
 8001cca:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001ccc:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cce:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cd4:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cd6:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd8:	f7ff f8f8 	bl	8000ecc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cdc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cde:	0021      	movs	r1, r4
 8001ce0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ce4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce6:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cea:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cec:	f7ff fb7a 	bl	80013e4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf0:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf2:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf4:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cf6:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf8:	f7ff fc4c 	bl	8001594 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001cfc:	b01e      	add	sp, #120	; 0x78
 8001cfe:	bd10      	pop	{r4, pc}
 8001d00:	40007000 	.word	0x40007000
 8001d04:	ffffe7ff 	.word	0xffffe7ff

08001d08 <main>:
{
 8001d08:	b5f0      	push	{r4, r5, r6, r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	2704      	movs	r7, #4
{
 8001d0c:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001d0e:	f7fe fbc9 	bl	80004a4 <HAL_Init>
  SystemClock_Config();
 8001d12:	f7ff ffbd 	bl	8001c90 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	2214      	movs	r2, #20
 8001d18:	2100      	movs	r1, #0
 8001d1a:	a807      	add	r0, sp, #28
 8001d1c:	f000 fa8a 	bl	8002234 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d20:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d22:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d24:	4d9f      	ldr	r5, [pc, #636]	; (8001fa4 <main+0x29c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d26:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d2a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2c:	433b      	orrs	r3, r7
 8001d2e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001d30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d32:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d34:	403b      	ands	r3, r7
 8001d36:	9303      	str	r3, [sp, #12]
 8001d38:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|BLUE_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001d42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d44:	4013      	ands	r3, r2
 8001d46:	9304      	str	r3, [sp, #16]
 8001d48:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4c:	3a7e      	subs	r2, #126	; 0x7e
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4333      	orrs	r3, r6
 8001d50:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001d52:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d54:	4033      	ands	r3, r6
 8001d56:	9305      	str	r3, [sp, #20]
 8001d58:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001d60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d62:	4013      	ands	r3, r2
 8001d64:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d6a:	f7ff f86d 	bl	8000e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|BLUE_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8001d6e:	2195      	movs	r1, #149	; 0x95
 8001d70:	2200      	movs	r2, #0
 8001d72:	00c9      	lsls	r1, r1, #3
 8001d74:	488c      	ldr	r0, [pc, #560]	; (8001fa8 <main+0x2a0>)
 8001d76:	f7ff f867 	bl	8000e48 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <main+0x2a4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d82:	a907      	add	r1, sp, #28
 8001d84:	488a      	ldr	r0, [pc, #552]	; (8001fb0 <main+0x2a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d86:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f7fe ff95 	bl	8000cb8 <HAL_GPIO_Init>
  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d90:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d92:	a907      	add	r1, sp, #28
 8001d94:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d96:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f7fe ff8b 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin BLUE_LED_Pin YELLOW_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|BLUE_LED_Pin|RED_LED_Pin;
 8001da2:	2385      	movs	r3, #133	; 0x85
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GREEN_LED_Pin|BLUE_LED_Pin|RED_LED_Pin;
 8001da6:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	487f      	ldr	r0, [pc, #508]	; (8001fa8 <main+0x2a0>)
  GPIO_InitStruct.Pin = GREEN_LED_Pin|BLUE_LED_Pin|RED_LED_Pin;
 8001daa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	f7fe ff81 	bl	8000cb8 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 8001db6:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	a907      	add	r1, sp, #28
 8001dba:	487b      	ldr	r0, [pc, #492]	; (8001fa8 <main+0x2a0>)
	GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 8001dbc:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f7fe ff78 	bl	8000cb8 <HAL_GPIO_Init>
	
  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001dc8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001dca:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dd0:	2302      	movs	r3, #2
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	a907      	add	r1, sp, #28
 8001dd4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dd6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f7fe ff6d 	bl	8000cb8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001de0:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001de2:	4333      	orrs	r3, r6
 8001de4:	632b      	str	r3, [r5, #48]	; 0x30
 8001de6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001de8:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dea:	4033      	ands	r3, r6
 8001dec:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001dee:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001df0:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001df2:	f7fe fe3f 	bl	8000a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001df6:	2009      	movs	r0, #9
 8001df8:	f7fe fe6c 	bl	8000ad4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	0021      	movs	r1, r4
 8001e00:	a807      	add	r0, sp, #28
 8001e02:	f000 fa17 	bl	8002234 <memset>
  hadc.Instance = ADC1;
 8001e06:	4d6b      	ldr	r5, [pc, #428]	; (8001fb4 <main+0x2ac>)
 8001e08:	4b6b      	ldr	r3, [pc, #428]	; (8001fb8 <main+0x2b0>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001e0a:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8001e0c:	602b      	str	r3, [r5, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	606b      	str	r3, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8001e14:	2308      	movs	r3, #8
 8001e16:	60ab      	str	r3, [r5, #8]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001e18:	19ab      	adds	r3, r5, r6
 8001e1a:	77de      	strb	r6, [r3, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001e1c:	1cab      	adds	r3, r5, #2
 8001e1e:	77dc      	strb	r4, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e20:	23c2      	movs	r3, #194	; 0xc2
 8001e22:	33ff      	adds	r3, #255	; 0xff
 8001e24:	626b      	str	r3, [r5, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001e26:	002b      	movs	r3, r5
 8001e28:	332c      	adds	r3, #44	; 0x2c
 8001e2a:	701e      	strb	r6, [r3, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001e2c:	612e      	str	r6, [r5, #16]
  hadc.Init.OversamplingMode = DISABLE;
 8001e2e:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc.Init.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8001e30:	63af      	str	r7, [r5, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e32:	60ec      	str	r4, [r5, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e34:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e36:	616f      	str	r7, [r5, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e38:	632c      	str	r4, [r5, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001e3a:	61ac      	str	r4, [r5, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001e3c:	636c      	str	r4, [r5, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001e3e:	61ec      	str	r4, [r5, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001e40:	f7fe fbb6 	bl	80005b0 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_11;
 8001e44:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <main+0x2b4>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e46:	a907      	add	r1, sp, #28
  sConfig.Channel = ADC_CHANNEL_11;
 8001e48:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001e4a:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e4c:	0028      	movs	r0, r5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001e4e:	015b      	lsls	r3, r3, #5
 8001e50:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001e52:	f7fe fda9 	bl	80009a8 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 8001e56:	4e5a      	ldr	r6, [pc, #360]	; (8001fc0 <main+0x2b8>)
 8001e58:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <main+0x2bc>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5a:	0030      	movs	r0, r6
  huart2.Instance = USART2;
 8001e5c:	6033      	str	r3, [r6, #0]
  huart2.Init.BaudRate = 115200;
 8001e5e:	23e1      	movs	r3, #225	; 0xe1
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	6073      	str	r3, [r6, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e64:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	60b4      	str	r4, [r6, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e68:	6173      	str	r3, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e6a:	60f4      	str	r4, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e6c:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e72:	6234      	str	r4, [r6, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e74:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e76:	f7ff fed9 	bl	8001c2c <HAL_UART_Init>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) pot_buffer, ADC_BUF_SIZE);
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	4952      	ldr	r1, [pc, #328]	; (8001fc8 <main+0x2c0>)
 8001e7e:	00d2      	lsls	r2, r2, #3
 8001e80:	0028      	movs	r0, r5
 8001e82:	f7fe fcf7 	bl	8000874 <HAL_ADC_Start_DMA>
					HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	9301      	str	r3, [sp, #4]
		HAL_ADC_Start(&hadc);
 8001e8c:	0028      	movs	r0, r5
 8001e8e:	f7fe fc67 	bl	8000760 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc, TIMEOUT) == HAL_OK)
 8001e92:	210a      	movs	r1, #10
 8001e94:	0028      	movs	r0, r5
 8001e96:	f7fe fc8f 	bl	80007b8 <HAL_ADC_PollForConversion>
 8001e9a:	1e04      	subs	r4, r0, #0
 8001e9c:	d129      	bne.n	8001ef2 <main+0x1ea>
		    pot_value = HAL_ADC_GetValue(&hadc);
 8001e9e:	0028      	movs	r0, r5
 8001ea0:	f7fe fd32 	bl	8000908 <HAL_ADC_GetValue>
 8001ea4:	4f49      	ldr	r7, [pc, #292]	; (8001fcc <main+0x2c4>)
 8001ea6:	0001      	movs	r1, r0
 8001ea8:	6038      	str	r0, [r7, #0]
			  HAL_UART_Transmit(&huart2, (uint8_t*)pot_value, MAX_STRING_SIZE, MAX_DELAY_MS);   
 8001eaa:	2364      	movs	r3, #100	; 0x64
 8001eac:	2206      	movs	r2, #6
 8001eae:	0030      	movs	r0, r6
 8001eb0:	f7ff fe22 	bl	8001af8 <HAL_UART_Transmit>
			  if(pot_value > 0 && pot_value < 250)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	1e5a      	subs	r2, r3, #1
 8001eb8:	2af8      	cmp	r2, #248	; 0xf8
 8001eba:	d850      	bhi.n	8001f5e <main+0x256>
					HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001ebc:	0022      	movs	r2, r4
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	4839      	ldr	r0, [pc, #228]	; (8001fa8 <main+0x2a0>)
 8001ec2:	f7fe ffc1 	bl	8000e48 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_SET);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	9901      	ldr	r1, [sp, #4]
					HAL_GPIO_WritePin(GPIOB, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001eca:	4837      	ldr	r0, [pc, #220]	; (8001fa8 <main+0x2a0>)
 8001ecc:	f7fe ffbc 	bl	8000e48 <HAL_GPIO_WritePin>
				if(pot_value > 700 && pot_value < 1000)
 8001ed0:	4a3f      	ldr	r2, [pc, #252]	; (8001fd0 <main+0x2c8>)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	189b      	adds	r3, r3, r2
 8001ed6:	2295      	movs	r2, #149	; 0x95
 8001ed8:	0052      	lsls	r2, r2, #1
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d857      	bhi.n	8001f8e <main+0x286>
					HAL_GPIO_WritePin(GPIOB, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	4831      	ldr	r0, [pc, #196]	; (8001fa8 <main+0x2a0>)
 8001ee4:	f7fe ffb0 	bl	8000e48 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, BLUE_LED_Pin, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2108      	movs	r1, #8
 8001eec:	482e      	ldr	r0, [pc, #184]	; (8001fa8 <main+0x2a0>)
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);				
 8001eee:	f7fe ffab 	bl	8000e48 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8001ef2:	2032      	movs	r0, #50	; 0x32
 8001ef4:	f7fe fafc 	bl	80004f0 <HAL_Delay>
		if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) && pot_value == 0)
 8001ef8:	20a0      	movs	r0, #160	; 0xa0
 8001efa:	9901      	ldr	r1, [sp, #4]
 8001efc:	05c0      	lsls	r0, r0, #23
 8001efe:	f7fe ff9d 	bl	8000e3c <HAL_GPIO_ReadPin>
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <main+0x2cc>)
 8001f04:	4c34      	ldr	r4, [pc, #208]	; (8001fd8 <main+0x2d0>)
			button_state = pressed;
 8001f06:	781b      	ldrb	r3, [r3, #0]
		if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) && pot_value == 0)
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d045      	beq.n	8001f98 <main+0x290>
 8001f0c:	4a2f      	ldr	r2, [pc, #188]	; (8001fcc <main+0x2c4>)
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	2a00      	cmp	r2, #0
 8001f12:	d141      	bne.n	8001f98 <main+0x290>
			  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|BLUE_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_SET);
 8001f14:	2795      	movs	r7, #149	; 0x95
			button_state = pressed;
 8001f16:	7023      	strb	r3, [r4, #0]
			  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|BLUE_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_SET);
 8001f18:	00ff      	lsls	r7, r7, #3
			 while(button_state)
 8001f1a:	7823      	ldrb	r3, [r4, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0b5      	beq.n	8001e8c <main+0x184>
			  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|BLUE_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_SET);
 8001f20:	0039      	movs	r1, r7
 8001f22:	2201      	movs	r2, #1
 8001f24:	4820      	ldr	r0, [pc, #128]	; (8001fa8 <main+0x2a0>)
 8001f26:	f7fe ff8f 	bl	8000e48 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f2a:	20a0      	movs	r0, #160	; 0xa0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2120      	movs	r1, #32
 8001f30:	05c0      	lsls	r0, r0, #23
 8001f32:	f7fe ff89 	bl	8000e48 <HAL_GPIO_WritePin>
		   	HAL_Delay(500);
 8001f36:	20fa      	movs	r0, #250	; 0xfa
 8001f38:	0040      	lsls	r0, r0, #1
 8001f3a:	f7fe fad9 	bl	80004f0 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|BLUE_LED_Pin|YELLOW_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8001f3e:	0039      	movs	r1, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <main+0x2a0>)
 8001f44:	f7fe ff80 	bl	8000e48 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f48:	20a0      	movs	r0, #160	; 0xa0
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2120      	movs	r1, #32
 8001f4e:	05c0      	lsls	r0, r0, #23
 8001f50:	f7fe ff7a 	bl	8000e48 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8001f54:	20fa      	movs	r0, #250	; 0xfa
 8001f56:	0040      	lsls	r0, r0, #1
 8001f58:	f7fe faca 	bl	80004f0 <HAL_Delay>
 8001f5c:	e7dd      	b.n	8001f1a <main+0x212>
				else if(pot_value > 250 && pot_value < 500)
 8001f5e:	001a      	movs	r2, r3
 8001f60:	3afb      	subs	r2, #251	; 0xfb
 8001f62:	2af8      	cmp	r2, #248	; 0xf8
 8001f64:	d807      	bhi.n	8001f76 <main+0x26e>
					HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001f66:	0022      	movs	r2, r4
 8001f68:	9901      	ldr	r1, [sp, #4]
 8001f6a:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <main+0x2a0>)
 8001f6c:	f7fe ff6c 	bl	8000e48 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2120      	movs	r1, #32
 8001f74:	e7a9      	b.n	8001eca <main+0x1c2>
				else if(pot_value > 500 && pot_value < 700)
 8001f76:	3bf6      	subs	r3, #246	; 0xf6
 8001f78:	3bff      	subs	r3, #255	; 0xff
 8001f7a:	2bc6      	cmp	r3, #198	; 0xc6
 8001f7c:	d8a8      	bhi.n	8001ed0 <main+0x1c8>
					HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, GPIO_PIN_RESET);
 8001f7e:	0022      	movs	r2, r4
 8001f80:	2120      	movs	r1, #32
 8001f82:	4809      	ldr	r0, [pc, #36]	; (8001fa8 <main+0x2a0>)
 8001f84:	f7fe ff60 	bl	8000e48 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	e79d      	b.n	8001eca <main+0x1c2>
					HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);				
 8001f8e:	20a0      	movs	r0, #160	; 0xa0
 8001f90:	2200      	movs	r2, #0
 8001f92:	2120      	movs	r1, #32
 8001f94:	05c0      	lsls	r0, r0, #23
 8001f96:	e7aa      	b.n	8001eee <main+0x1e6>
             button_state = !pressed;
 8001f98:	425a      	negs	r2, r3
 8001f9a:	4153      	adcs	r3, r2
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	7023      	strb	r3, [r4, #0]
 8001fa0:	e774      	b.n	8001e8c <main+0x184>
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	50000400 	.word	0x50000400
 8001fac:	10210000 	.word	0x10210000
 8001fb0:	50000800 	.word	0x50000800
 8001fb4:	20000914 	.word	0x20000914
 8001fb8:	40012400 	.word	0x40012400
 8001fbc:	2c000800 	.word	0x2c000800
 8001fc0:	2000084c 	.word	0x2000084c
 8001fc4:	40004400 	.word	0x40004400
 8001fc8:	2000004a 	.word	0x2000004a
 8001fcc:	2000002c 	.word	0x2000002c
 8001fd0:	fffffd43 	.word	0xfffffd43
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000048 	.word	0x20000048

08001fdc <HAL_ADC_ConvHalfCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	4802      	ldr	r0, [pc, #8]	; (8001fec <HAL_ADC_ConvHalfCpltCallback+0x10>)
 8001fe4:	f7fe ff30 	bl	8000e48 <HAL_GPIO_WritePin>
}
 8001fe8:	bd10      	pop	{r4, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	50000800 	.word	0x50000800

08001ff0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	4804      	ldr	r0, [pc, #16]	; (8002008 <HAL_ADC_ConvCpltCallback+0x18>)
 8001ff8:	f7fe ff26 	bl	8000e48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2120      	movs	r1, #32
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <HAL_ADC_ConvCpltCallback+0x1c>)
 8002002:	f7fe ff21 	bl	8000e48 <HAL_GPIO_WritePin>
}
 8002006:	bd10      	pop	{r4, pc}
 8002008:	50000800 	.word	0x50000800
 800200c:	50000400 	.word	0x50000400

08002010 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002010:	4770      	bx	lr
	...

08002014 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	2201      	movs	r2, #1
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_MspInit+0x18>)
 8002018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201a:	430a      	orrs	r2, r1
 800201c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002022:	0552      	lsls	r2, r2, #21
 8002024:	430a      	orrs	r2, r1
 8002026:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002028:	4770      	bx	lr
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002030:	b530      	push	{r4, r5, lr}
 8002032:	0005      	movs	r5, r0
 8002034:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	2214      	movs	r2, #20
 8002038:	2100      	movs	r1, #0
 800203a:	a801      	add	r0, sp, #4
 800203c:	f000 f8fa 	bl	8002234 <memset>
  if(hadc->Instance==ADC1)
 8002040:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <HAL_ADC_MspInit+0x7c>)
 8002042:	682a      	ldr	r2, [r5, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d12f      	bne.n	80020a8 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_ADC_MspInit+0x80>)
 800204c:	0092      	lsls	r2, r2, #2
 800204e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PC1     ------> ADC_IN11 
    */
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8002050:	4818      	ldr	r0, [pc, #96]	; (80020b4 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002052:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	2104      	movs	r1, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002056:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	430a      	orrs	r2, r1
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	400b      	ands	r3, r1
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 8002066:	2302      	movs	r3, #2
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8002068:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = POTENTIOMETER_Pin;
 800206a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206c:	3301      	adds	r3, #1
 800206e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(POTENTIOMETER_GPIO_Port, &GPIO_InitStruct);
 8002070:	f7fe fe22 	bl	8000cb8 <HAL_GPIO_Init>
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Request = DMA_REQUEST_0;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002074:	2280      	movs	r2, #128	; 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8002076:	4c10      	ldr	r4, [pc, #64]	; (80020b8 <HAL_ADC_MspInit+0x88>)
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_ADC_MspInit+0x8c>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800207a:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800207c:	1892      	adds	r2, r2, r2
 800207e:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 8002084:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002086:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002088:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800208a:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800208c:	0020      	movs	r0, r4
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800208e:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002090:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002092:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002094:	61e2      	str	r2, [r4, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002096:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002098:	f7fe fd40 	bl	8000b1c <HAL_DMA_Init>
 800209c:	2800      	cmp	r0, #0
 800209e:	d001      	beq.n	80020a4 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 80020a0:	f7ff ffb6 	bl	8002010 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80020a4:	64ec      	str	r4, [r5, #76]	; 0x4c
 80020a6:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020a8:	b007      	add	sp, #28
 80020aa:	bd30      	pop	{r4, r5, pc}
 80020ac:	40012400 	.word	0x40012400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	50000800 	.word	0x50000800
 80020b8:	200008cc 	.word	0x200008cc
 80020bc:	40020008 	.word	0x40020008

080020c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020c0:	b510      	push	{r4, lr}
 80020c2:	0004      	movs	r4, r0
 80020c4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c6:	2214      	movs	r2, #20
 80020c8:	2100      	movs	r1, #0
 80020ca:	a801      	add	r0, sp, #4
 80020cc:	f000 f8b2 	bl	8002234 <memset>
  if(huart->Instance==USART2)
 80020d0:	4b10      	ldr	r3, [pc, #64]	; (8002114 <HAL_UART_MspInit+0x54>)
 80020d2:	6822      	ldr	r2, [r4, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d11a      	bne.n	800210e <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_UART_MspInit+0x58>)
 80020dc:	0292      	lsls	r2, r2, #10
 80020de:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e2:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	430a      	orrs	r2, r1
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	400b      	ands	r3, r1
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020f8:	230c      	movs	r3, #12
 80020fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	3b0a      	subs	r3, #10
 80020fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	185b      	adds	r3, r3, r1
 8002102:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002104:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002106:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002108:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f7fe fdd5 	bl	8000cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800210e:	b006      	add	sp, #24
 8002110:	bd10      	pop	{r4, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40004400 	.word	0x40004400
 8002118:	40021000 	.word	0x40021000

0800211c <NMI_Handler>:
 800211c:	4770      	bx	lr

0800211e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211e:	e7fe      	b.n	800211e <HardFault_Handler>

08002120 <SVC_Handler>:
 8002120:	4770      	bx	lr

08002122 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002122:	4770      	bx	lr

08002124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002124:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002126:	f7fe f9d1 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800212a:	bd10      	pop	{r4, pc}

0800212c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800212c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800212e:	4802      	ldr	r0, [pc, #8]	; (8002138 <DMA1_Channel1_IRQHandler+0xc>)
 8002130:	f7fe fd77 	bl	8000c22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002134:	bd10      	pop	{r4, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	200008cc 	.word	0x200008cc

0800213c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <SystemInit+0x44>)
 8002140:	0052      	lsls	r2, r2, #1
 8002142:	6819      	ldr	r1, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	490e      	ldr	r1, [pc, #56]	; (8002184 <SystemInit+0x48>)
 800214c:	400a      	ands	r2, r1
 800214e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	490d      	ldr	r1, [pc, #52]	; (8002188 <SystemInit+0x4c>)
 8002154:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002156:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002158:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	438a      	bics	r2, r1
 800215e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	490a      	ldr	r1, [pc, #40]	; (800218c <SystemInit+0x50>)
 8002164:	400a      	ands	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	4909      	ldr	r1, [pc, #36]	; (8002190 <SystemInit+0x54>)
 800216c:	400a      	ands	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <SystemInit+0x58>)
 8002178:	0512      	lsls	r2, r2, #20
 800217a:	609a      	str	r2, [r3, #8]
#endif
}
 800217c:	4770      	bx	lr
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	40021000 	.word	0x40021000
 8002184:	88ff400c 	.word	0x88ff400c
 8002188:	fef6fff6 	.word	0xfef6fff6
 800218c:	fffbffff 	.word	0xfffbffff
 8002190:	ff02ffff 	.word	0xff02ffff
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800219a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800219c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800219e:	e003      	b.n	80021a8 <LoopCopyDataInit>

080021a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80021a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021a6:	3104      	adds	r1, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <LoopForever+0xa>)
  ldr  r3, =_edata
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <LoopForever+0xe>)
  adds  r2, r0, r1
 80021ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021b0:	d3f6      	bcc.n	80021a0 <CopyDataInit>
  ldr  r2, =_sbss
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80021b4:	e002      	b.n	80021bc <LoopFillZerobss>

080021b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80021b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80021b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ba:	3204      	adds	r2, #4

080021bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <LoopForever+0x16>)
  cmp  r2, r3
 80021be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021c0:	d3f9      	bcc.n	80021b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021c2:	f7ff ffbb 	bl	800213c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f000 f811 	bl	80021ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7ff fd9d 	bl	8001d08 <main>

080021ce <LoopForever>:

LoopForever:
    b LoopForever
 80021ce:	e7fe      	b.n	80021ce <LoopForever>
   ldr   r0, =_estack
 80021d0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80021d4:	080022a0 	.word	0x080022a0
  ldr  r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021dc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80021e0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80021e4:	20000970 	.word	0x20000970

080021e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_COMP_IRQHandler>
	...

080021ec <__libc_init_array>:
 80021ec:	b570      	push	{r4, r5, r6, lr}
 80021ee:	2600      	movs	r6, #0
 80021f0:	4d0c      	ldr	r5, [pc, #48]	; (8002224 <__libc_init_array+0x38>)
 80021f2:	4c0d      	ldr	r4, [pc, #52]	; (8002228 <__libc_init_array+0x3c>)
 80021f4:	1b64      	subs	r4, r4, r5
 80021f6:	10a4      	asrs	r4, r4, #2
 80021f8:	42a6      	cmp	r6, r4
 80021fa:	d109      	bne.n	8002210 <__libc_init_array+0x24>
 80021fc:	2600      	movs	r6, #0
 80021fe:	f000 f821 	bl	8002244 <_init>
 8002202:	4d0a      	ldr	r5, [pc, #40]	; (800222c <__libc_init_array+0x40>)
 8002204:	4c0a      	ldr	r4, [pc, #40]	; (8002230 <__libc_init_array+0x44>)
 8002206:	1b64      	subs	r4, r4, r5
 8002208:	10a4      	asrs	r4, r4, #2
 800220a:	42a6      	cmp	r6, r4
 800220c:	d105      	bne.n	800221a <__libc_init_array+0x2e>
 800220e:	bd70      	pop	{r4, r5, r6, pc}
 8002210:	00b3      	lsls	r3, r6, #2
 8002212:	58eb      	ldr	r3, [r5, r3]
 8002214:	4798      	blx	r3
 8002216:	3601      	adds	r6, #1
 8002218:	e7ee      	b.n	80021f8 <__libc_init_array+0xc>
 800221a:	00b3      	lsls	r3, r6, #2
 800221c:	58eb      	ldr	r3, [r5, r3]
 800221e:	4798      	blx	r3
 8002220:	3601      	adds	r6, #1
 8002222:	e7f2      	b.n	800220a <__libc_init_array+0x1e>
 8002224:	08002298 	.word	0x08002298
 8002228:	08002298 	.word	0x08002298
 800222c:	08002298 	.word	0x08002298
 8002230:	0800229c 	.word	0x0800229c

08002234 <memset>:
 8002234:	0003      	movs	r3, r0
 8002236:	1882      	adds	r2, r0, r2
 8002238:	4293      	cmp	r3, r2
 800223a:	d100      	bne.n	800223e <memset+0xa>
 800223c:	4770      	bx	lr
 800223e:	7019      	strb	r1, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	e7f9      	b.n	8002238 <memset+0x4>

08002244 <_init>:
 8002244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800224a:	bc08      	pop	{r3}
 800224c:	469e      	mov	lr, r3
 800224e:	4770      	bx	lr

08002250 <_fini>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002256:	bc08      	pop	{r3}
 8002258:	469e      	mov	lr, r3
 800225a:	4770      	bx	lr
